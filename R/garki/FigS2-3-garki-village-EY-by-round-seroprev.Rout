
R version 3.2.3 (2015-12-10) -- "Wooden Christmas-Tree"
Copyright (C) 2015 The R Foundation for Statistical Computing
Platform: x86_64-apple-darwin13.4.0 (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

[Previously saved workspace restored]

> 
> #-------------------------------
> # FigS2-3-garki-village-EY-by-round-seroprev.R
> #
> # Calculate age-specific antibody
> # curves and age-adjusted mean
> # Pf IFA seroprevalence by
> # village and survey round
> #
> #-------------------------------
> 
> 
> 
> #-------------------------------
> # preamble
> #-------------------------------
> 
> rm(list=ls())
> library(SuperLearner)
Loading required package: nnls
Super Learner
Version: 2.0-21
Package created on 2016-11-11

Warning message:
package ‘SuperLearner’ was built under R version 3.2.5 
> library(tmle)
Welcome to the tmle package, version 1.2.0-2

Use tmleNews() to see details on changes and bug fixes

Attaching package: ‘tmle’

The following object is masked from ‘package:SuperLearner’:

    SL.glm.interaction

> library(tmleAb)
Welcome to the tmleAb package
Targeted maximum likelihood estimation for antibody measurements.
(Version 0.2.0)

Periodically check for the latest development version using 
devtools::install_github('ben-arnold/tmleAb')  

This software is based on work funded by the National Institute of Allergy and Infectius Diseases grant K01-AI119180


> 
> 
> #-------------------------------
> # load the serology dataset
> #-------------------------------
> d <- garki_sero
> 
> d$mdate <- as.Date(d$mdate,"%d %b %Y")
> 
> 
> 
> # add 2 control village names
> d$vname <- factor(d$vname,levels=c(levels(d$vname),"Nabanawa","Ajura"))
> d$vname[d$village==552] <- "Nabanawa"
> d$vname[d$village==553] <- "Ajura"
> d$vname <- factor(d$vname)
> 
> # identify sero-positive individuals (Table 21 of Molineaux 1980, p 175)
> d$ifapfpos <- ifelse(d$ifatpftitre>=20,1,0)
> 
> # subset to ages 0-20
> d <- subset(d,ageyrs<=20)
> 
> # drop observations without outcome or age measurements
> d <- subset(d,!is.na(d$ifapfpos) & !is.na(d$ageyrs))
> 
> #-------------------------------
> # Estimate antibody curves
> # by village and survey round
> # group 2 control villages into
> # the same curve for visual
> # presentation
> #-------------------------------
> 
> 
> # SL library
> SL.library <- c("SL.mean","SL.glm","SL.gam","SL.loess")
> 
> set.seed(5463452)
> 
> 
> # small wrapper function to call
> # agecurveAb() by village
> # and by survey round
> SLAb.wrap <- function(svy,vil,d) {
+   # svy : survey round
+   # vil : village number
+   # d   : dataset
+   return( agecurveAb(Y=d$ifapfpos[d$village==vil & d$serosvy==svy],Age=d$ageyrs[d$village==vil & d$serosvy==svy],id=d$id[d$village==vil & d$serosvy==svy],SL.library=SL.library) )
+ }
> 
> # Control Villages 
> # Nabanawa + Ajura
> # (not using wrapper fn above because need to combine across svy rounds)
> c12.EYxa <- agecurveAb(
+   Y=d$ifapfpos[d$tr=="Control" & d$serosvy>=1 & d$serosvy<=2],
+   Age=d$ageyrs[d$tr=="Control" & d$serosvy>=1 & d$serosvy<=2],
+   id=d$id[d$tr=="Control" & d$serosvy>=1 & d$serosvy<=2],
+   SL.library=SL.library
+   )
Loading required package: gam
Loading required package: splines
Loading required package: foreach
Loaded gam 1.12


Summary of SuperLearner cross validated risk and 
weights for algorithms included in the library:

                   CV-Risk      Coef
SL.mean_All    0.004183258 0.4610978
SL.glm_All     0.004181619 0.0000000
SL.gam.df5_All 0.004170590 0.0000000
SL.loess_All   0.004175969 0.5389022
> c345.EYxa <- agecurveAb(
+   Y=d$ifapfpos[d$tr=="Control" & d$serosvy>=3 & d$serosvy<=5],
+   Age=d$ageyrs[d$tr=="Control" & d$serosvy>=3 & d$serosvy<=5],
+   id=d$id[d$tr=="Control" & d$serosvy>=3 & d$serosvy<=5],
+   SL.library=SL.library
+ )

Summary of SuperLearner cross validated risk and 
weights for algorithms included in the library:

                   CV-Risk Coef
SL.mean_All     0.04162450    0
SL.glm_All      0.03953579    0
SL.gam.df10_All 0.03453452    1
SL.loess_All    0.03709286    0
> c678.EYxa <- agecurveAb(
+   Y=d$ifapfpos[d$tr=="Control" & d$serosvy>=6 & d$serosvy<=8],
+   Age=d$ageyrs[d$tr=="Control" & d$serosvy>=6 & d$serosvy<=8],
+   id=d$id[d$tr=="Control" & d$serosvy>=6 & d$serosvy<=8],
+   SL.library=SL.library
+ )

Summary of SuperLearner cross validated risk and 
weights for algorithms included in the library:

                   CV-Risk        Coef
SL.mean_All     0.03345841 0.001038517
SL.glm_All      0.03236763 0.000000000
SL.gam.df10_All 0.03061694 0.998961483
SL.loess_All    0.03144981 0.000000000
> 
> # village cluster 5
> # Kawari
> v153.EYxa <- sapply(1:8,SLAb.wrap,vil=153,d=d,simplify=FALSE)

Summary of SuperLearner cross validated risk and 
weights for algorithms included in the library:

                    CV-Risk Coef
SL.mean_All    0.000000e+00    1
SL.glm_All     7.807170e-31    0
SL.gam.df5_All 8.410261e-31    0
SL.loess_All   2.619265e-31    0

Summary of SuperLearner cross validated risk and 
weights for algorithms included in the library:

                  CV-Risk       Coef
SL.mean_All    0.02225962 0.91748996
SL.glm_All     0.02290238 0.04310684
SL.gam.df2_All 0.02310782 0.01939390
SL.loess_All   0.02397394 0.02000930

Summary of SuperLearner cross validated risk and 
weights for algorithms included in the library:

                  CV-Risk      Coef
SL.mean_All    0.06024691 0.2933512
SL.glm_All     0.05972636 0.0000000
SL.gam.df2_All 0.05876138 0.7066488
SL.loess_All   0.06001575 0.0000000

Summary of SuperLearner cross validated risk and 
weights for algorithms included in the library:

                   CV-Risk Coef
SL.mean_All     0.14159209    0
SL.glm_All      0.12545512    0
SL.gam.df10_All 0.04482268    1
SL.loess_All    0.11297537    0

Summary of SuperLearner cross validated risk and 
weights for algorithms included in the library:

                   CV-Risk       Coef
SL.mean_All     0.18953099 0.03008729
SL.glm_All      0.14612733 0.04097924
SL.gam.df10_All 0.09564541 0.92893347
SL.loess_All    0.11823998 0.00000000

Summary of SuperLearner cross validated risk and 
weights for algorithms included in the library:

                 CV-Risk       Coef
SL.mean_All    0.2238365 0.03452453
SL.glm_All     0.1649431 0.00000000
SL.gam.df7_All 0.1119111 0.96547547
SL.loess_All   0.1363288 0.00000000

Summary of SuperLearner cross validated risk and 
weights for algorithms included in the library:

                  CV-Risk      Coef
SL.mean_All    0.06884086 0.4680713
SL.glm_All     0.06929765 0.0000000
SL.gam.df4_All 0.06843520 0.0000000
SL.loess_All   0.06850357 0.5319287

Summary of SuperLearner cross validated risk and 
weights for algorithms included in the library:

                  CV-Risk      Coef
SL.mean_All    0.05380373 0.5498496
SL.glm_All     0.05411769 0.2887233
SL.gam.df3_All 0.05702658 0.1614271
SL.loess_All   0.06254993 0.0000000
> 
> # Rafin Marke
> v154.EYxa <- sapply(1:8,SLAb.wrap,vil=154,d=d,simplify=FALSE)

Summary of SuperLearner cross validated risk and 
weights for algorithms included in the library:

                  CV-Risk       Coef
SL.mean_All    0.01410422 0.89860486
SL.glm_All     0.01437763 0.01887558
SL.gam.df2_All 0.01447757 0.08251956
SL.loess_All   0.01494520 0.00000000

Summary of SuperLearner cross validated risk and 
weights for algorithms included in the library:

                  CV-Risk Coef
SL.mean_All    0.04730840    0
SL.glm_All     0.04549892    0
SL.gam.df9_All 0.03871990    1
SL.loess_All   0.04277167    0

Summary of SuperLearner cross validated risk and 
weights for algorithms included in the library:

                  CV-Risk      Coef
SL.mean_All    0.10616171 0.1281851
SL.glm_All     0.09747510 0.1354349
SL.gam.df9_All 0.09140977 0.7363800
SL.loess_All   0.09283368 0.0000000

Summary of SuperLearner cross validated risk and 
weights for algorithms included in the library:

                  CV-Risk       Coef
SL.mean_All     0.1846247 0.01615451
SL.glm_All      0.1434347 0.03555383
SL.gam.df10_All 0.1068515 0.94829166
SL.loess_All    0.1148645 0.00000000

Summary of SuperLearner cross validated risk and 
weights for algorithms included in the library:

                  CV-Risk Coef
SL.mean_All    0.22802855    0
SL.glm_All     0.16482605    0
SL.gam.df8_All 0.09190089    1
SL.loess_All   0.10403050    0

Summary of SuperLearner cross validated risk and 
weights for algorithms included in the library:

                   CV-Risk Coef
SL.mean_All     0.25443962    0
SL.glm_All      0.16117655    0
SL.gam.df10_All 0.09949409    1
SL.loess_All    0.11090298    0

Summary of SuperLearner cross validated risk and 
weights for algorithms included in the library:

                 CV-Risk       Coef
SL.mean_All    0.1652132 0.05914516
SL.glm_All     0.1457285 0.13603906
SL.gam.df7_All 0.1384228 0.80481578
SL.loess_All   0.1392643 0.00000000

Summary of SuperLearner cross validated risk and 
weights for algorithms included in the library:

                  CV-Risk      Coef
SL.mean_All     0.1518774 0.1364885
SL.glm_All      0.1364299 0.0000000
SL.gam.df10_All 0.1186885 0.8635115
SL.loess_All    0.1259219 0.0000000
> 
> # Kukar Maikiva
> v155.EYxa <- sapply(1:8,SLAb.wrap,vil=155,d=d,simplify=FALSE)

Summary of SuperLearner cross validated risk and 
weights for algorithms included in the library:

                  CV-Risk      Coef
SL.mean_All    0.01939182 0.2603903
SL.glm_All     0.01933176 0.0000000
SL.gam.df9_All 0.01865490 0.7396097
SL.loess_All   0.01901989 0.0000000

Summary of SuperLearner cross validated risk and 
weights for algorithms included in the library:

                  CV-Risk Coef
SL.mean_All    0.02930747    0
SL.glm_All     0.02852384    0
SL.gam.df9_All 0.02351961    1
SL.loess_All   0.02697771    0

Summary of SuperLearner cross validated risk and 
weights for algorithms included in the library:

                   CV-Risk       Coef
SL.mean_All     0.08569102 0.08787891
SL.glm_All      0.08036126 0.00000000
SL.gam.df10_All 0.07151936 0.91212109
SL.loess_All    0.07976919 0.00000000

Summary of SuperLearner cross validated risk and 
weights for algorithms included in the library:

                   CV-Risk Coef
SL.mean_All     0.17699203    0
SL.glm_All      0.13593976    0
SL.gam.df10_All 0.09141792    1
SL.loess_All    0.11111692    0

Summary of SuperLearner cross validated risk and 
weights for algorithms included in the library:

                   CV-Risk Coef
SL.mean_All     0.20613986    0
SL.glm_All      0.14309032    0
SL.gam.df10_All 0.09057754    1
SL.loess_All    0.11321265    0

Summary of SuperLearner cross validated risk and 
weights for algorithms included in the library:

                   CV-Risk Coef
SL.mean_All     0.23498607    0
SL.glm_All      0.14693108    0
SL.gam.df10_All 0.09130915    1
SL.loess_All    0.10336952    0

Summary of SuperLearner cross validated risk and 
weights for algorithms included in the library:

                 CV-Risk Coef
SL.mean_All    0.1655069    0
SL.glm_All     0.1291746    0
SL.gam.df9_All 0.1036044    1
SL.loess_All   0.1143613    0

Summary of SuperLearner cross validated risk and 
weights for algorithms included in the library:

                  CV-Risk       Coef
SL.mean_All     0.1616952 0.04190934
SL.glm_All      0.1277710 0.18072275
SL.gam.df10_All 0.1171684 0.77736791
SL.loess_All    0.1231913 0.00000000
> 
> # village cluster 7
> # Kargo Kudu
> v213.EYxa <- sapply(1:8,SLAb.wrap,vil=213,d=d,simplify=FALSE)

Summary of SuperLearner cross validated risk and 
weights for algorithms included in the library:

                     CV-Risk Coef
SL.mean_All     0.000000e+00    0
SL.glm_All      4.723162e-31    1
SL.gam.df10_All 4.515943e-31    0
SL.loess_All    2.411599e-31    0

Summary of SuperLearner cross validated risk and 
weights for algorithms included in the library:

                    CV-Risk Coef
SL.mean_All    0.000000e+00    0
SL.glm_All     1.334855e-30    1
SL.gam.df9_All 9.851631e-31    0
SL.loess_All   2.777904e-31    0

Summary of SuperLearner cross validated risk and 
weights for algorithms included in the library:

                  CV-Risk       Coef
SL.mean_All    0.07294012 0.07399593
SL.glm_All     0.06718978 0.00000000
SL.gam.df9_All 0.04955443 0.65800087
SL.loess_All   0.04981890 0.26800320

Summary of SuperLearner cross validated risk and 
weights for algorithms included in the library:

                   CV-Risk Coef
SL.mean_All     0.13455911    0
SL.glm_All      0.11356395    0
SL.gam.df10_All 0.03680979    1
SL.loess_All    0.09750039    0

Summary of SuperLearner cross validated risk and 
weights for algorithms included in the library:

                  CV-Risk Coef
SL.mean_All    0.17088938    0
SL.glm_All     0.14260839    0
SL.gam.df9_All 0.08217007    1
SL.loess_All   0.11839530    0

Summary of SuperLearner cross validated risk and 
weights for algorithms included in the library:

                  CV-Risk Coef
SL.mean_All    0.22583332    0
SL.glm_All     0.12319274    0
SL.gam.df7_All 0.03801340    1
SL.loess_All   0.04075119    0

Summary of SuperLearner cross validated risk and 
weights for algorithms included in the library:

                  CV-Risk       Coef
SL.mean_All    0.09387755 0.09848573
SL.glm_All     0.08658263 0.04978846
SL.gam.df3_All 0.08241383 0.85172581
SL.loess_All   0.08735491 0.00000000

Summary of SuperLearner cross validated risk and 
weights for algorithms included in the library:

                    CV-Risk Coef
SL.mean_All    0.000000e+00    0
SL.glm_All     1.057034e-30    1
SL.gam.df8_All 9.447675e-31    0
SL.loess_All   3.011530e-31    0
> 
> # Nasakar
> v218.EYxa <- sapply(1:8,SLAb.wrap,vil=218,d=d,simplify=FALSE)

Summary of SuperLearner cross validated risk and 
weights for algorithms included in the library:

                    CV-Risk Coef
SL.mean_All    0.000000e+00    1
SL.glm_All     3.253171e-31    0
SL.gam.df5_All 3.156324e-31    0
SL.loess_All   3.338279e-31    0

Summary of SuperLearner cross validated risk and 
weights for algorithms included in the library:

                    CV-Risk Coef
SL.mean_All    0.000000e+00    1
SL.glm_All     1.014521e-31    0
SL.gam.df3_All 1.079311e-31    0
SL.loess_All   3.838428e-31    0

Summary of SuperLearner cross validated risk and 
weights for algorithms included in the library:

                  CV-Risk      Coef
SL.mean_All    0.03432994 0.2682604
SL.glm_All     0.03393183 0.3293209
SL.gam.df5_All 0.03422090 0.0000000
SL.loess_All   0.03414111 0.4024187

Summary of SuperLearner cross validated risk and 
weights for algorithms included in the library:

                  CV-Risk Coef
SL.mean_All    0.10660724    0
SL.glm_All     0.10098109    0
SL.gam.df8_All 0.07912828    1
SL.loess_All   0.08755857    0

Summary of SuperLearner cross validated risk and 
weights for algorithms included in the library:

                   CV-Risk Coef
SL.mean_All     0.20081926    0
SL.glm_All      0.15853507    0
SL.gam.df10_All 0.08314525    1
SL.loess_All    0.11416859    0

Summary of SuperLearner cross validated risk and 
weights for algorithms included in the library:

                  CV-Risk       Coef
SL.mean_All    0.22709826 0.01012362
SL.glm_All     0.14181117 0.00000000
SL.gam.df8_All 0.07809377 0.98987638
SL.loess_All   0.08886969 0.00000000

Summary of SuperLearner cross validated risk and 
weights for algorithms included in the library:

                  CV-Risk       Coef
SL.mean_All     0.1974376 0.02462995
SL.glm_All      0.1593305 0.01704163
SL.gam.df10_All 0.1379559 0.95832842
SL.loess_All    0.1476048 0.00000000

Summary of SuperLearner cross validated risk and 
weights for algorithms included in the library:

                 CV-Risk       Coef
SL.mean_All    0.1161495 0.13110184
SL.glm_All     0.1092312 0.04572683
SL.gam.df9_All 0.1016710 0.82317133
SL.loess_All   0.1077209 0.00000000
> 
> # Bakan Sabara
> v220.EYxa <- sapply(1:8,SLAb.wrap,vil=220,d=d,simplify=FALSE)

Summary of SuperLearner cross validated risk and 
weights for algorithms included in the library:

                     CV-Risk Coef
SL.mean_All     0.000000e+00    0
SL.glm_All      2.500407e-31    1
SL.gam.df10_All 2.764535e-31    0
SL.loess_All    2.205465e-31    0

Summary of SuperLearner cross validated risk and 
weights for algorithms included in the library:

                    CV-Risk Coef
SL.mean_All    0.000000e+00    1
SL.glm_All     1.660760e-31    0
SL.gam.df4_All 1.634810e-31    0
SL.loess_All   2.296519e-31    0

Summary of SuperLearner cross validated risk and 
weights for algorithms included in the library:

                  CV-Risk       Coef
SL.mean_All    0.03862438 0.95717034
SL.glm_All     0.04060010 0.04282966
SL.gam.df2_All 0.04122349 0.00000000
SL.loess_All   0.04288777 0.00000000

Summary of SuperLearner cross validated risk and 
weights for algorithms included in the library:

                 CV-Risk       Coef
SL.mean_All    0.1768368 0.04798762
SL.glm_All     0.1468607 0.17140022
SL.gam.df7_All 0.1301161 0.78061216
SL.loess_All   0.1376528 0.00000000

Summary of SuperLearner cross validated risk and 
weights for algorithms included in the library:

                 CV-Risk      Coef
SL.mean_All    0.2655092 0.0000000
SL.glm_All     0.1875490 0.1862386
SL.gam.df7_All 0.1297748 0.6024446
SL.loess_All   0.1596745 0.2113168

Summary of SuperLearner cross validated risk and 
weights for algorithms included in the library:

                  CV-Risk      Coef
SL.mean_All    0.27248513 0.0000000
SL.glm_All     0.17508602 0.0000000
SL.gam.df7_All 0.07338813 0.8725296
SL.loess_All   0.08473885 0.1274704

Summary of SuperLearner cross validated risk and 
weights for algorithms included in the library:

                 CV-Risk       Coef
SL.mean_All    0.2166428 0.00000000
SL.glm_All     0.1651219 0.08419243
SL.gam.df4_All 0.1387434 0.91580757
SL.loess_All   0.1453924 0.00000000

Summary of SuperLearner cross validated risk and 
weights for algorithms included in the library:

                 CV-Risk       Coef
SL.mean_All    0.1740741 0.04433662
SL.glm_All     0.1870428 0.31582686
SL.gam.df6_All 0.1500158 0.02960264
SL.loess_All   0.1586731 0.61023388
> 
> 
> 
> #-------------------------------
> # Estimate mean IFA P. falciparm
> # seroprevalence by village and survey round
> #-------------------------------
> 
> 
> # since there are many, many cases
> # of villages with 100% seropositive
> # for a given survey round, it is
> # impossible to estimate a TMLE.
> # instead,  estimate a mean
> # with exact binomial confidence interval
> 
> seroprev_est <- function(x) {
+   # x : a binary indicator of seropositive(1) vs. seronegative(0)
+   tabx <- table(x)
+   if(length(tabx)<2) {
+     tabx <- c(0,tabx)
+   }
+   estx <- binom.test(x=tabx[2],n=sum(tabx))
+   res <- c(estx$estimate,estx$conf.int)
+   names(res) <- c('mean','min95','max95')
+   return(res)
+ }
> 
> 
> #-------------------------------
> # Serological survey timing:
> # 1-2 : pre-intervention
> # 3-5 : intervention period
> # 6-8 : post-intervention
> #-------------------------------
> 
> ## Control Villages (no measurement in round 6)
> # Nabanawa + Ajura
> 
> v552 <-  sapply(c(1:5,7:8),function(x) seroprev_est(d$ifapfpos[d$tr=="Control" & d$serosvy==x]) )
> 	# add NA column for survey round 6
> 	v552 <- cbind(v552[,1:5],rep(NA,3),v552[,6:7])
> 
> 
> 
> ### Spraying (Propoxur) + MDA
> 
> # village cluster 5
> # Kawari
> v153 <- sapply(c(1:8),function(x) seroprev_est(d$ifapfpos[d$village==153 & d$serosvy==x]) )
> 
> # Rafin Marke
> v154 <- sapply(c(1:8),function(x) seroprev_est(d$ifapfpos[d$village==154 & d$serosvy==x]) )
> 
> # Kukar Maikiva
> v155 <- sapply(c(1:8),function(x) seroprev_est(d$ifapfpos[d$village==155 & d$serosvy==x]) )
> 
> 
> # village cluster 7
> # Kargo Kudu
> v213 <- sapply(c(1:8),function(x) seroprev_est(d$ifapfpos[d$village==213 & d$serosvy==x]) )
> 
> # Nasakar
> v218 <- sapply(c(1:8),function(x) seroprev_est(d$ifapfpos[d$village==218 & d$serosvy==x]) )
> 
> # Bakan Sabara
> v220 <- sapply(c(1:8),function(x) seroprev_est(d$ifapfpos[d$village==220 & d$serosvy==x]) )
> 
> 
> #-------------------------------
> # save the analysis output
> #-------------------------------
> rm(d)
> save.image("~/dropbox/articles/antibody-curves/results/raw/garki-village-EY-by-round-seroprev.RData")
> 
> 
> 
> proc.time()
   user  system elapsed 
102.531   3.335 122.795 
