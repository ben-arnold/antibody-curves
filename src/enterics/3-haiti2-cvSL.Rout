
R version 3.2.4 (2016-03-10) -- "Very Secure Dishes"
Copyright (C) 2016 The R Foundation for Statistical Computing
Platform: x86_64-apple-darwin13.4.0 (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

[Previously saved workspace restored]

> 
> #-------------------------------
> # 3-haiti2-cvSL.R
> #
> # Compute the cross-validated
> # risk for the super leaner
> # and its constituent algorithms
> #
> # repeat calculations for multiple
> # enteric pathogens in the Haiti-2
> # cohort
> #-------------------------------
> 
> 
> 
> #-------------------------------
> # preamble
> #-------------------------------
> rm(list=ls())
> library(SuperLearner)
Loading required package: nnls
Super Learner
Version: 2.0-15
Package created on 2014-07-16

Use SuperLearnerNews() to see changes from previous versions and latest news

> library(tmleAb)
Welcome to the tmleAb package
Targeted maximum likelihood estimation for antibody (Ab) measurements.
> library(r2weight)
> library(ggplot2)
> library(RColorBrewer)
> library(scales)
> 
> 
> 
> #-------------------------------
> # load the dataset for analysis
> #-------------------------------
> # d.haiti <- read.csv("~/dropbox/articles/antibody-curves/data/enterics/haiti-enterics-public.csv")
> 
> d <- haiti_enterics
> 
> 
> #-------------------------------
> # fit cross-validated SL
> #-------------------------------
> 
> SL.library <- c("SL.mean","SL.glm","SL.Yman2016","SL.gam","SL.loess","SL.randomForest","SL.polymars")
> 
> # giardia
> set.seed(982375)
> CVvsp5 <- ab_cvSL(Y=log10(d$vsp5+1),Age=d$agey,id=d$id,family=gaussian(),V=10,SL.library=SL.library)
Loading required package: randomForest
randomForest 4.6-10
Type rfNews() to see new features/changes/bug fixes.
Loading required package: gam
Loading required package: splines
Loading required package: foreach
Loaded gam 1.12

Loading required package: polspline
> 
> # noro GI
> set.seed(2359)
> CVnorogi <- ab_cvSL(Y=log10(d$norogi+1),Age=d$agey,id=d$id,family=gaussian(),V=10,SL.library=SL.library)
> 
> #------------------------------
> # print results to log
> #------------------------------
> 
> # giardia
> summary(CVvsp5)

Call:  
SuperLearner::CV.SuperLearner(Y = fitd$Y, X = X, V = V, family = family,  
    SL.library = SL.library, id = fitd$id, control = list(saveFitLibrary = TRUE)) 


Risk is based on: Mean Squared Error

All risk estimates are based on V =  10 

                Algorithm     Ave       se     Min     Max
            Super Learner 0.64950 0.037098 0.40682 0.87488
              Discrete SL 0.65819 0.037834 0.41253 0.86574
              SL.mean_All 0.84637 0.042834 0.58269 1.09557
               SL.glm_All 0.85028 0.042754 0.58761 1.09539
          SL.Yman2016_All 0.75326 0.037504 0.53836 0.96566
           SL.gam.df9_All 0.64483 0.036124 0.41253 0.86574
             SL.loess_All 0.65978 0.034642 0.41385 0.88800
 SL.randomForest.ns40_All 0.65989 0.040177 0.42133 0.90726
          SL.polymars_All 0.66181 0.038182 0.41765 0.86698
> 
> # noro GI
> summary(CVnorogi)

Call:  
SuperLearner::CV.SuperLearner(Y = fitd$Y, X = X, V = V, family = family,  
    SL.library = SL.library, id = fitd$id, control = list(saveFitLibrary = TRUE)) 


Risk is based on: Mean Squared Error

All risk estimates are based on V =  10 

                Algorithm     Ave       se     Min    Max
            Super Learner 0.99090 0.045577 0.80320 1.3924
              Discrete SL 0.98111 0.045638 0.79234 1.3939
              SL.mean_All 1.24452 0.046217 0.85817 1.6858
               SL.glm_All 1.07156 0.045240 0.76552 1.6150
          SL.Yman2016_All 1.10257 0.063464 0.84856 1.5119
           SL.gam.df8_All 0.98111 0.045638 0.79234 1.3939
             SL.loess_All 0.98961 0.045685 0.80234 1.4275
 SL.randomForest.ns40_All 1.00146 0.047648 0.80312 1.3925
          SL.polymars_All 0.98894 0.046071 0.77814 1.4009
> 
> #-------------------------------
> # plot the CV Risk estimates
> #-------------------------------
> library(RColorBrewer)
> cbPalette <- c("#000000", "#E69F00", "#56B4E9", "#009E73", "#F0E442", "#0072B2", "#D55E00", "#CC79A7")
> cols <- cbPalette[c(1:4,6:8)]
> cols <- c(cols,brewer.pal(8,"Dark2")[3])
> 
> # pdf("~/dropbox/articles/antibody-curves/results/figs/haiti-cvSL-vsp5.pdf")
> # ab_plot_cvSL(CVvsp5,ylab="10-fold Cross-validated MSE",title="Giardia intestinalis VSP-5, Haiti",col=cols,ylim=c(0.4,1.4))
> # dev.off()
> # 
> # pdf("~/dropbox/articles/antibody-curves/results/figs/haiti-cvSL-ngii.pdf")
> # ab_plot_cvSL(CVnorogi,ylab="10-fold Cross-validated MSE",title="Norovirus GII.4 NO, Haiti",col=cols,ylim=c(0.4,1.4))
> # dev.off()
> 
> 
> #-------------------------------
> # plot the CV R2 estimates
> #-------------------------------
> X <- data.frame(Age=d$agey)
> 
> pdf("~/dropbox/articles/antibody-curves/results/figs/haiti-cvR2-vsp5.pdf")
> ab_plot_cvR2(CVvsp5,X=X,ylab="10-fold Cross-validated R-squared",title=expression(paste(italic('Giardia intestinalis')," VSP-5, Haiti")),col=cols,ylim=c(0,0.6))
  cvr2$Algorithm      r2   lower  upper
1  Super Learner  0.2326  0.1626 0.2967
2    Simple Mean  0.0000  0.0000 0.0000
3            GLM -0.0046 -0.0108 0.0015
4       Yman2016  0.1100  0.0670 0.1510
5            GAM  0.2381  0.1706 0.3001
6          LOESS  0.2205  0.1518 0.2836
7  Random Forest  0.2203  0.1378 0.2950
8           MARS  0.2181  0.1514 0.2794
> dev.off()
null device 
          1 
> 
> pdf("~/dropbox/articles/antibody-curves/results/figs/haiti-cvR2-norogi.pdf")
> ab_plot_cvR2(CVnorogi,X=X,ylab="10-fold Cross-validated R-squared",title="Norovirus GI.4, Haiti",col=cols,ylim=c(0,0.6))
  cvr2$Algorithm     r2   lower  upper
1  Super Learner 0.2038  0.1492 0.2549
2    Simple Mean 0.0000  0.0000 0.0000
3            GLM 0.1390  0.0995 0.1767
4       Yman2016 0.1141 -0.0682 0.2652
5            GAM 0.2117  0.1562 0.2635
6          LOESS 0.2048  0.1519 0.2545
7  Random Forest 0.1953  0.1343 0.2520
8           MARS 0.2054  0.1457 0.2609
> dev.off()
null device 
          1 
> 
> 
> 
> #-------------------------------
> # plot the age-antibody curves
> # for the full SL and the 
> # restricted SL library to
> # compare EYxa and EYx
> # setting the same seed to
> # get exactly the same splits
> # for cross-validation
> #-------------------------------
> 
> #-------------------------------
> # Giardia VSP-5
> #-------------------------------
> # full library
> SL.library <- c("SL.mean","SL.glm","SL.Yman2016","SL.gam","SL.loess","SL.randomForest","SL.polymars")
> set.seed(543221)
> SLvsp5full <- ab_agecurve(Y=log10(d$vsp5+1),Age=d$agey,id=d$id,SL.library=SL.library)

Call:  
SuperLearner::SuperLearner(Y = fitd$Y, X = X, family = family, SL.library = SL.library,  
    method = "method.NNLS", id = fitd$id) 


                              Risk        Coef
SL.mean_All              0.8491138 0.006425052
SL.glm_All               0.8568878 0.000000000
SL.Yman2016_All          0.7532987 0.000000000
SL.gam.df8_All           0.6486630 0.544468045
SL.loess_All             0.6635543 0.000000000
SL.randomForest.ns40_All 0.6520485 0.449106903
SL.polymars_All          0.6835295 0.000000000
> 
> # restricted library
> SL.library <- c("SL.mean","SL.glm","SL.Yman2016","SL.gam","SL.loess")
> set.seed(543221)
> SLvsp5res <- ab_agecurve(Y=log10(d$vsp5+1),Age=d$agey,id=d$id,SL.library=SL.library)

Call:  
SuperLearner::SuperLearner(Y = fitd$Y, X = X, family = family, SL.library = SL.library,  
    method = "method.NNLS", id = fitd$id) 


                     Risk Coef
SL.mean_All     0.8500532    0
SL.glm_All      0.8536546    0
SL.Yman2016_All 0.7584949    0
SL.gam.df8_All  0.6494956    1
SL.loess_All    0.6638858    0
> 
> 
> # plot age-dependent antibody curves and means for two SL libraries
> pdf("~/dropbox/articles/antibody-curves/results/figs/haiti2-cvSLcurves-vsp5.pdf",width=5,height=5)
> 
> ytics <- seq(0,5,by=1)
> xtics <- seq(0,12,by=2)
> 
> # EYax
> op <- par(mar=c(4,5,4,0)+0.1,xpd=T)
> plot(SLvsp5full$Age,SLvsp5full$Y,col=alpha("black",alpha=0.4),pch=16,cex=0.3,
+      ylim=c(0,5),ylab="",yaxt="n",
+      xlim=c(0,max(xtics)+1),xlab="",xaxt="n",
+      bty="n",las=1
+ )
> mtext("Luminex response (MFI-background)",side=2,line=3)
> # mtext("d",adj=1,line=2,at=-2,font=2,cex=1.75)
> # mtext("Intervention Period",adj=0,line=3,at=0,cex=1.5)
> mtext(expression(paste(italic('Giardia intestinalis')," VSP-5, Haiti")),side=3,line=2)
> mtext("Super learner ensemble prediction",side=3,line=0.5)
> mtext("Age, years",side=1,line=2.5)
> axis(2,at=0:5,labels=c(
+   expression(10^0),
+   expression(10^1),
+   expression(10^2),
+   expression(10^3),
+   expression(10^4),
+   expression(10^5)
+ ), las=1,cex.axis=1.25
+ )
> # segments(x0=min(xtics),x1=max(xtics),y0=ytics,lty=2,col="gray70")
> axis(1,at=xtics,cex.axis=1.5)
> lines(SLvsp5full$pYframe$Age,SLvsp5full$pYframe$pY,col=cols[1],lwd=1)
> lines(SLvsp5res$pYframe$Age,SLvsp5res$pYframe$pY,col=cols[2],lwd=1)
> 
> legend(x=12,y=0,xjust=1,yjust=0,legend=c("Full library","Restricted library"),lty=c(1,1), lwd=c(2,2),col=cols[1:2],cex=0.8,bty="n")
> par(op)
> 
> 
> dev.off()
null device 
          1 
> 
> 
> #-------------------------------
> # Noro GI.4
> #-------------------------------
> # full library
> SL.library <- c("SL.mean","SL.glm","SL.Yman2016","SL.gam","SL.loess","SL.randomForest","SL.polymars")
> set.seed(543221)
> SLnorofull <- ab_agecurve(Y=log10(d$norogi+1),Age=d$agey,id=d$id,SL.library=SL.library)

Call:  
SuperLearner::SuperLearner(Y = fitd$Y, X = X, family = family, SL.library = SL.library,  
    method = "method.NNLS", id = fitd$id) 


                              Risk      Coef
SL.mean_All              1.2475278 0.0160989
SL.glm_All               1.0744645 0.0137064
SL.Yman2016_All          1.1126772 0.0000000
SL.gam.df4_All           0.9902541 0.4266013
SL.loess_All             0.9941317 0.0000000
SL.randomForest.ns35_All 1.0068407 0.3049441
SL.polymars_All          0.9910714 0.2386493
> 
> # restricted library
> SL.library <- c("SL.mean","SL.glm","SL.Yman2016","SL.gam","SL.loess")
> set.seed(543221)
> SLnorores <- ab_agecurve(Y=log10(d$norogi+1),Age=d$agey,id=d$id,SL.library=SL.library)

Call:  
SuperLearner::SuperLearner(Y = fitd$Y, X = X, family = family, SL.library = SL.library,  
    method = "method.NNLS", id = fitd$id) 


                     Risk         Coef
SL.mean_All     1.2495975 0.0242324156
SL.glm_All      1.0786597 0.0004825135
SL.Yman2016_All 1.1140605 0.0000000000
SL.gam.df8_All  0.9862919 0.9752850709
SL.loess_All    0.9947615 0.0000000000
> 
> 
> # plot age-dependent antibody curves and means for two SL libraries
> pdf("~/dropbox/articles/antibody-curves/results/figs/haiti2-cvSLcurves-norogi.pdf",width=5,height=5)
> 
> ytics <- seq(0,5,by=1)
> xtics <- seq(0,12,by=2)
> 
> # EYax
> op <- par(mar=c(4,5,4,0)+0.1,xpd=T)
> plot(SLnorofull$Age,SLnorofull$Y,col=alpha("black",alpha=0.4),pch=16,cex=0.3,
+      ylim=c(0,5),ylab="",yaxt="n",
+      xlim=c(0,max(xtics)+1),xlab="",xaxt="n",
+      bty="n",las=1
+ )
> mtext("Luminex response (MFI-background)",side=2,line=3)
> # mtext("d",adj=1,line=2,at=-2,font=2,cex=1.75)
> # mtext("Intervention Period",adj=0,line=3,at=0,cex=1.5)
> mtext("Norovirus GI.4, Haiti",side=3,line=2)
> mtext("Super learner ensemble prediction",side=3,line=0.5)
> mtext("Age, years",side=1,line=2.5)
> axis(2,at=0:5,labels=c(
+   expression(10^0),
+   expression(10^1),
+   expression(10^2),
+   expression(10^3),
+   expression(10^4),
+   expression(10^5)
+ ), las=1,cex.axis=1.25
+ )
> # segments(x0=min(xtics),x1=max(xtics),y0=ytics,lty=2,col="gray70")
> axis(1,at=xtics,cex.axis=1.5)
> lines(SLnorofull$pYframe$Age,SLnorofull$pYframe$pY,col=cols[1],lwd=1)
> lines(SLnorores$pYframe$Age,SLnorores$pYframe$pY,col=cols[2],lwd=1)
> 
> legend(x=12,y=0,xjust=1,yjust=0,legend=c("Full library","Restricted library"),lty=c(1,1), lwd=c(2,2),col=cols[1:2],cex=0.8,bty="n")
> par(op)
> 
> 
> dev.off()
null device 
          1 
> 
> 
> 
> 
> 
> 
> proc.time()
   user  system elapsed 
235.460   3.472 244.663 
