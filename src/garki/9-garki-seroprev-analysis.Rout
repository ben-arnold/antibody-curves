
R version 3.3.1 (2016-06-21) -- "Bug in Your Hair"
Copyright (C) 2016 The R Foundation for Statistical Computing
Platform: x86_64-apple-darwin13.4.0 (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

[Previously saved workspace restored]

> #-------------------------------
> # garki-seroprev-analysis.R
> #
> # re-analyze the garki study
> # using seroprevalence data rather
> # than quantitative Ab titres
> #-------------------------------
> 
> #-------------------------------
> # preamble
> #-------------------------------
> rm(list=ls())
> library(SuperLearner)
Loading required package: nnls
Super Learner
Version: 2.0-21
Package created on 2016-11-11

> library(tmle)
Welcome to the tmle package, version 1.2.0-2

Use tmleNews() to see details on changes and bug fixes

Attaching package: ‘tmle’

The following object is masked from ‘package:SuperLearner’:

    SL.glm.interaction

> library(tmleAb)
Welcome to the tmleAb package
Targeted maximum likelihood estimation for antibody measurements.
(Version 0.2.0)

Periodically check for the latest development version using 
devtools::install_github('ben-arnold/tmleAb')  

This software is based on work funded by the National Institute of Allergy and Infectius Diseases grant K01-AI119180


> 
> 
> #-------------------------------
> # load the serology dataset
> #-------------------------------
> d <- read.csv("~/dropbox/articles/antibody-curves/data/garki/final/garki-sero.csv")
> 
> d$mdate <- as.Date(d$mdate,"%d %b %Y")
> 
> 
> # add 2 control village names
> d$vname <- factor(d$vname,levels=c(levels(d$vname),"Nabanawa","Ajura"))
> d$vname[d$village==552] <- "Nabanawa"
> d$vname[d$village==553] <- "Ajura"
> d$vname <- factor(d$vname)
> 
> # identify sero-positive individuals (Table 21 of Molineaux 1980, p 175)
> d$ifapfpos <- ifelse(d$ifatpftitre>=20,1,0)
> 
> # subset to ages 0-20
> d <- subset(d,ageyrs<=20)
> 
> # subset to non-missing values 
> d <- subset(d,!is.na(ifapfpos))
> 
> # subset to non-missing values and just a few variables
> # ad <- subset(d,!is.na(ifapfpos),select=c('tr','serosvy','ageyrs','ifapfpos'))
> 
> #-------------------------------
> # Serological survey timing:
> # 1-2 : pre-intervention
> # 3-5 : intervention period
> # 6-8 : post-intervention
> #-------------------------------
> 
> # subset the data by group and survey round for convenience
> # combine control measures by phase of the study
> d.c12  <- d[d$tr=="Control" & (d$serosvy==1|d$serosvy==2),]
> d.c345 <- d[d$tr=="Control" & (d$serosvy==3|d$serosvy==4|d$serosvy==5),]
> d.c78  <- d[d$tr=="Control" & (d$serosvy==7|d$serosvy==8),]
> 
> d.tr1 <- d[d$tr=="Intervention" & d$serosvy==1,]
> d.tr2 <- d[d$tr=="Intervention" & d$serosvy==2,]
> d.tr3 <- d[d$tr=="Intervention" & d$serosvy==3,]
> d.tr4 <- d[d$tr=="Intervention" & d$serosvy==4,]
> d.tr5 <- d[d$tr=="Intervention" & d$serosvy==5,]
> d.tr6 <- d[d$tr=="Intervention" & d$serosvy==6,]
> d.tr7 <- d[d$tr=="Intervention" & d$serosvy==7,]
> d.tr8 <- d[d$tr=="Intervention" & d$serosvy==8,]
> 
> 
> 
> #-------------------------------
> # Step 1: 
> # Age-specific seroprevalence
> # curves
> #-------------------------------
> 
> # SL library
> SL.library <- c("SL.mean","SL.glm","SL.gam","SL.loess")
> 
> 
> # Pre-intervention period fitted curves
> set.seed(23752)
> p.c12 <- agecurveAb(Y=d.c12$ifapfpos,Age=d.c12$ageyrs,id=d.c12$id,SL.library=SL.library)
Loading required package: gam
Loading required package: splines
Loading required package: foreach
Loaded gam 1.12


Summary of SuperLearner cross validated risk and 
weights for algorithms included in the library:

                   CV-Risk       Coef
SL.mean_All    0.004203718 0.98110303
SL.glm_All     0.004232823 0.01889697
SL.gam.df2_All 0.004249084 0.00000000
SL.loess_All   0.004312906 0.00000000
> p.tr1 <- agecurveAb(Y=d.tr1$ifapfpos,Age=d.tr1$ageyrs,id=d.tr1$id,SL.library=SL.library)

Summary of SuperLearner cross validated risk and 
weights for algorithms included in the library:

                   CV-Risk      Coef
SL.mean_All    0.007257482 0.3016183
SL.glm_All     0.007236223 0.3565005
SL.gam.df3_All 0.007245585 0.3418812
SL.loess_All   0.007293774 0.0000000
> p.tr2 <- agecurveAb(Y=d.tr2$ifapfpos,Age=d.tr2$ageyrs,id=d.tr2$id,SL.library=SL.library)

Summary of SuperLearner cross validated risk and 
weights for algorithms included in the library:

                   CV-Risk Coef
SL.mean_All     0.01917676    0
SL.glm_All      0.01883183    0
SL.gam.df10_All 0.01745663    1
SL.loess_All    0.01828906    0
> 
> # Intervention phase fitted curves
> set.seed(2436)
> p.c345 <- agecurveAb(Y=d.c345$ifapfpos,Age=d.c345$ageyrs,id=d.c345$id,SL.library=SL.library)

Summary of SuperLearner cross validated risk and 
weights for algorithms included in the library:

                   CV-Risk Coef
SL.mean_All     0.04165191    0
SL.glm_All      0.03968380    0
SL.gam.df10_All 0.03488514    1
SL.loess_All    0.03745596    0
> p.tr3 <- agecurveAb(Y=d.tr3$ifapfpos,Age=d.tr3$ageyrs,id=d.tr3$id,SL.library=SL.library)

Summary of SuperLearner cross validated risk and 
weights for algorithms included in the library:

                   CV-Risk Coef
SL.mean_All     0.06897557    0
SL.glm_All      0.06446645    0
SL.gam.df10_All 0.05721823    1
SL.loess_All    0.06183188    0
> p.tr4 <- agecurveAb(Y=d.tr4$ifapfpos,Age=d.tr4$ageyrs,id=d.tr4$id,SL.library=SL.library)

Summary of SuperLearner cross validated risk and 
weights for algorithms included in the library:

                   CV-Risk Coef
SL.mean_All     0.15181840    0
SL.glm_All      0.12402299    0
SL.gam.df10_All 0.07786026    1
SL.loess_All    0.10293969    0
> p.tr5 <- agecurveAb(Y=d.tr5$ifapfpos,Age=d.tr5$ageyrs,id=d.tr5$id,SL.library=SL.library)

Summary of SuperLearner cross validated risk and 
weights for algorithms included in the library:

                   CV-Risk Coef
SL.mean_All     0.20809072    0
SL.glm_All      0.15430477    0
SL.gam.df10_All 0.09092481    1
SL.loess_All    0.11393041    0
> 
> # post intervention period fitted curves
> # note: no control measurement in round 6
> set.seed(45234)
> p.c78 <- agecurveAb(Y=d.c78$ifapfpos,Age=d.c78$ageyrs,id=d.c78$id,SL.library=SL.library)

Summary of SuperLearner cross validated risk and 
weights for algorithms included in the library:

                  CV-Risk       Coef
SL.mean_All    0.03357290 0.06676262
SL.glm_All     0.03258611 0.00000000
SL.gam.df7_All 0.03138101 0.93323738
SL.loess_All   0.03172273 0.00000000
> p.tr6 <- agecurveAb(Y=d.tr6$ifapfpos,Age=d.tr6$ageyrs,id=d.tr6$id,SL.library=SL.library)

Summary of SuperLearner cross validated risk and 
weights for algorithms included in the library:

                   CV-Risk Coef
SL.mean_All     0.23327326    0
SL.glm_All      0.14729769    0
SL.gam.df10_All 0.08147486    1
SL.loess_All    0.09626630    0
> p.tr7 <- agecurveAb(Y=d.tr7$ifapfpos,Age=d.tr7$ageyrs,id=d.tr7$id,SL.library=SL.library)

Summary of SuperLearner cross validated risk and 
weights for algorithms included in the library:

                 CV-Risk         Coef
SL.mean_All    0.1503606 0.0100100922
SL.glm_All     0.1256941 0.0007365786
SL.gam.df8_All 0.1151845 0.9892533292
SL.loess_All   0.1166609 0.0000000000
> p.tr8 <- agecurveAb(Y=d.tr8$ifapfpos,Age=d.tr8$ageyrs,id=d.tr8$id,SL.library=SL.library)

Summary of SuperLearner cross validated risk and 
weights for algorithms included in the library:

                   CV-Risk Coef
SL.mean_All     0.11877146    0
SL.glm_All      0.10626501    0
SL.gam.df10_All 0.09725468    1
SL.loess_All    0.10180735    0
> 
> 
> #-------------------------------
> # Step 2: 
> # Calculate age-adjusted mean
> # sero-prevalence
> # and difference in means
> # by treatment group and 
> # survey round
> # 
> # unlike the quantitative analysis
> # all of the change in the 
> # age-prevalence curves is in <5s
> # so compare means for children <5
> #-------------------------------
> 
> # subset the data to children <5y
> d <- subset(d,ageyrs<=5)
> 
> # create a numeric 0/1 treatment variable
> d$tr01 <- ifelse(d$tr=="Control",0,1)
> 
> 
> set.seed(5463452)
> 
> ## Control Villages 
> # Nabanawa + Ajura
> # (no measurement in survey round 6)
> mu_c <- sapply(c(1:5,7:8),function(x) tmleAb(Y=d$ifapfpos[d$tr=="Control" & d$serosvy==x],
+                                              W=data.frame(Age=d$ageyrs[d$tr=="Control" & d$serosvy==x]),
+                                              id=d$id[d$tr=="Control" & d$serosvy==x],
+                                              SL.library=SL.library)[c("psi","se","lb","ub","p")] )
 Population Mean
   Parameter Estimate:  0.9916
   Estimated Variance:  7.0616e-05
              p-value:  <2e-16
    95% Conf Interval: (0.97513, 1.0081) 
 Population Mean
   Parameter Estimate:  0.99074
   Estimated Variance:  8.5734e-05
              p-value:  <2e-16
    95% Conf Interval: (0.97259, 1.0089) 
 Population Mean
   Parameter Estimate:  0.94737
   Estimated Variance:  0.00044125
              p-value:  <2e-16
    95% Conf Interval: (0.9062, 0.98854) 
 Population Mean
   Parameter Estimate:  0.82883
   Estimated Variance:  0.0012897
              p-value:  <2e-16
    95% Conf Interval: (0.75844, 0.89922) 
 Population Mean
   Parameter Estimate:  0.93636
   Estimated Variance:  0.00054667
              p-value:  <2e-16
    95% Conf Interval: (0.89054, 0.98219) 
 Population Mean
   Parameter Estimate:  0.95192
   Estimated Variance:  0.00044433
              p-value:  <2e-16
    95% Conf Interval: (0.91061, 0.99324) 
 Population Mean
   Parameter Estimate:  0.89744
   Estimated Variance:  0.0011954
              p-value:  <2e-16
    95% Conf Interval: (0.82967, 0.9652) 
> 
> 
> ### Intervention Villages - Spraying (Propoxur) + MDA
> mu_i <- sapply(c(1:8),function(x) tmleAb(Y=d$ifapfpos[d$tr=="Intervention" & d$serosvy==x],
+                                          W=data.frame(Age=d$ageyrs[d$tr=="Intervention" & d$serosvy==x]),
+                                          id=d$id[d$tr=="Intervention" & d$serosvy==x],
+                                          SL.library=SL.library)[c("psi","se","lb","ub","p")] )
 Population Mean
   Parameter Estimate:  0.98396
   Estimated Variance:  8.4868e-05
              p-value:  <2e-16
    95% Conf Interval: (0.9659, 1.002) 
 Population Mean
   Parameter Estimate:  0.9593
   Estimated Variance:  0.00022831
              p-value:  <2e-16
    95% Conf Interval: (0.92969, 0.98892) 
 Population Mean
   Parameter Estimate:  0.85577
   Estimated Variance:  0.00059627
              p-value:  <2e-16
    95% Conf Interval: (0.80791, 0.90363) 
 Population Mean
   Parameter Estimate:  0.64078
   Estimated Variance:  0.0011228
              p-value:  <2e-16
    95% Conf Interval: (0.5751, 0.70645) 
 Population Mean
   Parameter Estimate:  0.47951
   Estimated Variance:  0.0010271
              p-value:  <2e-16
    95% Conf Interval: (0.41669, 0.54232) 
 Population Mean
   Parameter Estimate:  0.34052
   Estimated Variance:  0.00097214
              p-value:  <2e-16
    95% Conf Interval: (0.27941, 0.40163) 
 Population Mean
   Parameter Estimate:  0.65789
   Estimated Variance:  0.00099149
              p-value:  <2e-16
    95% Conf Interval: (0.59618, 0.71961) 
 Population Mean
   Parameter Estimate:  0.7619
   Estimated Variance:  0.0010863
              p-value:  <2e-16
    95% Conf Interval: (0.69731, 0.8265) 
> 
> 
> #-------------------------------
> # Estimate difference between
> # control and intervention villages in
> # IFA P. falciparm
> # seroprevalence (<5y) by survey round
> #-------------------------------
> 
> set.seed(79287234)
> diff_psi <- sapply(c(1:5,7:8),function(x) tmleAb(Y=d$ifapfpos[d$serosvy==x],
+                                                  X=d$tr01[d$serosvy==x],
+                                                  W=data.frame(Age=d$ageyrs[d$serosvy==x]),
+                                                  id=d$id[d$serosvy==x],
+                                                  SL.library=SL.library)[c("psi","se","lb","ub","p")])
 Additive Effect
   Parameter Estimate:  -0.0085099
   Estimated Variance:  0.00014735
              p-value:  0.48327
    95% Conf Interval: (-0.032302, 0.015282) 
 Additive Effect
   Parameter Estimate:  -0.033431
   Estimated Variance:  0.00028358
              p-value:  0.047119
    95% Conf Interval: (-0.066437, -0.00042491) 
 Additive Effect
   Parameter Estimate:  -0.086941
   Estimated Variance:  0.00080413
              p-value:  0.0021699
    95% Conf Interval: (-0.14252, -0.031361) 
 Additive Effect
   Parameter Estimate:  -0.18228
   Estimated Variance:  0.001736
              p-value:  1.2147e-05
    95% Conf Interval: (-0.26395, -0.10062) 
 Additive Effect
   Parameter Estimate:  -0.44753
   Estimated Variance:  0.0013208
              p-value:  <2e-16
    95% Conf Interval: (-0.51876, -0.3763) 
 Additive Effect
   Parameter Estimate:  -0.2908
   Estimated Variance:  0.0013693
              p-value:  3.8818e-15
    95% Conf Interval: (-0.36333, -0.21827) 
 Additive Effect
   Parameter Estimate:  -0.14164
   Estimated Variance:  0.0019274
              p-value:  0.0012542
    95% Conf Interval: (-0.22769, -0.055592) 
> 
> # P-values for differences in means, with Bonferroni correction for 7 tests
> sprintf("%1.4f",unlist(diff_psi[5,])*7)
[1] "3.3829" "0.3298" "0.0152" "0.0001" "0.0000" "0.0000" "0.0088"
> 
> 
> #-------------------------------
> # save down the results
> #-------------------------------
> save.image("~/dropbox/articles/antibody-curves/results/raw/garki-seroprev-analysis.RData")
> 
> proc.time()
   user  system elapsed 
 53.905   0.783  55.453 
