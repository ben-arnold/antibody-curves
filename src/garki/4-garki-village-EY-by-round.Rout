
R version 3.2.4 (2016-03-10) -- "Very Secure Dishes"
Copyright (C) 2016 The R Foundation for Statistical Computing
Platform: x86_64-apple-darwin13.4.0 (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

[Previously saved workspace restored]

> 
> #-------------------------------
> # 3-garki-village-EY-by-round
> #
> # Calculate age-specific antibody
> # curves and age-adjusted mean
> # Pf IFA antibody titres by
> # village and survey round
> #
> #-------------------------------
> 
> 
> 
> #-------------------------------
> # preamble
> #-------------------------------
> 
> rm(list=ls())
> library(SuperLearner)
Loading required package: nnls
Super Learner
Version: 2.0-15
Package created on 2014-07-16

Use SuperLearnerNews() to see changes from previous versions and latest news

> library(tmle)
Welcome to the tmle package, version 1.2.0-2

Use tmleNews() to see details on changes and bug fixes

Attaching package: ‘tmle’

The following object is masked from ‘package:SuperLearner’:

    SL.glm.interaction

> library(tmleAb)
Welcome to the tmleAb package
Targeted maximum likelihood estimation for antibody (Ab) measurements.
> 
> 
> #-------------------------------
> # load the serology dataset
> #-------------------------------
> # d <- read.csv("~/dropbox/articles/antibody-curves/data/garki/final/garki-sero.csv")
> d <- garki_sero
> 
> d$mdate <- as.Date(d$mdate,"%d %b %Y")
> 
> 
> # add 2 control village names
> d$vname <- factor(d$vname,levels=c(levels(d$vname),"Nabanawa","Ajura"))
> d$vname[d$village==552] <- "Nabanawa"
> d$vname[d$village==553] <- "Ajura"
> d$vname <- factor(d$vname)
> 
> # subset to ages 0-20
> d <- subset(d,ageyrs<=20)
> 
> #-------------------------------
> # Estimate antibody curves
> # by village and survey round
> # group 2 control villages into
> # the same curve for visual
> # presentation
> #-------------------------------
> 
> 
> # SL library
> SL.library <- c("SL.mean","SL.glm","SL.Yman2016","SL.gam","SL.loess")
> 
> set.seed(5463452)
> 
> 
> # small wrapper function to call
> # ab_agecurve() by village
> # and by survey round
> SLAb.wrap <- function(svy,vil,d) {
+   # svy : survey round
+   # vil : village number
+   # d   : dataset
+   return( ab_agecurve(Y=log10(d$ifatpftitre[d$village==vil & d$serosvy==svy]+1),Age=d$ageyrs[d$village==vil & d$serosvy==svy],id=d$id[d$village==vil & d$serosvy==svy],SL.library=SL.library) )
+ }
> 
> # Control Villages 
> # Nabanawa + Ajura
> # (not using wrapper fn above because need to combine across svy rounds)
> c12.EYxa <- ab_agecurve(
+   Y=log10(d$ifatpftitre[d$tr=="Control" & d$serosvy>=1 & d$serosvy<=2]+1),
+   Age=d$ageyrs[d$tr=="Control" & d$serosvy>=1 & d$serosvy<=2],
+   id=d$id[d$tr=="Control" & d$serosvy>=1 & d$serosvy<=2],
+   SL.library=SL.library
+   )
Loading required package: gam
Loading required package: splines
Loading required package: foreach
Loaded gam 1.12


Call:  
SuperLearner::SuperLearner(Y = fitd$Y, X = X, family = family, SL.library = SL.library,  
    method = "method.NNLS", id = fitd$id) 


                     Risk       Coef
SL.mean_All     0.3345227 0.02156170
SL.glm_All      0.2929486 0.02797152
SL.Yman2016_All 0.3005111 0.00000000
SL.gam.df5_All  0.2570754 0.00000000
SL.loess_All    0.2559327 0.95046678
Warning message:
In ab_agecurve(Y = log10(d$ifatpftitre[d$tr == "Control" & d$serosvy >=  :
  448 observations were dropped due to missing values in the outcome, age, or adjustement covariates. 
 The original dataset contained 926 observations,
 but ab_agecurve is fitting the curve using 478 observations.
> c345.EYxa <- ab_agecurve(
+   Y=log10(d$ifatpftitre[d$tr=="Control" & d$serosvy>=3 & d$serosvy<=5]+1),
+   Age=d$ageyrs[d$tr=="Control" & d$serosvy>=3 & d$serosvy<=5],
+   id=d$id[d$tr=="Control" & d$serosvy>=3 & d$serosvy<=5],
+   SL.library=SL.library
+ )

Call:  
SuperLearner::SuperLearner(Y = fitd$Y, X = X, family = family, SL.library = SL.library,  
    method = "method.NNLS", id = fitd$id) 


                     Risk Coef
SL.mean_All     0.7535932    0
SL.glm_All      0.6314908    0
SL.Yman2016_All 0.6828540    0
SL.gam.df6_All  0.5171191    1
SL.loess_All    0.5243852    0
Warning message:
In ab_agecurve(Y = log10(d$ifatpftitre[d$tr == "Control" & d$serosvy >=  :
  569 observations were dropped due to missing values in the outcome, age, or adjustement covariates. 
 The original dataset contained 1306 observations,
 but ab_agecurve is fitting the curve using 737 observations.
> c678.EYxa <- ab_agecurve(
+   Y=log10(d$ifatpftitre[d$tr=="Control" & d$serosvy>=6 & d$serosvy<=8]+1),
+   Age=d$ageyrs[d$tr=="Control" & d$serosvy>=6 & d$serosvy<=8],
+   id=d$id[d$tr=="Control" & d$serosvy>=6 & d$serosvy<=8],
+   SL.library=SL.library
+ )

Call:  
SuperLearner::SuperLearner(Y = fitd$Y, X = X, family = family, SL.library = SL.library,  
    method = "method.NNLS", id = fitd$id) 


                     Risk         Coef
SL.mean_All     0.5781992 0.0007307395
SL.glm_All      0.4860225 0.0000000000
SL.Yman2016_All 0.5136415 0.0000000000
SL.gam.df6_All  0.3906179 0.9992692605
SL.loess_All    0.3933313 0.0000000000
Warning message:
In ab_agecurve(Y = log10(d$ifatpftitre[d$tr == "Control" & d$serosvy >=  :
  443 observations were dropped due to missing values in the outcome, age, or adjustement covariates. 
 The original dataset contained 820 observations,
 but ab_agecurve is fitting the curve using 377 observations.
> 
> # village cluster 5
> # Kawari
> v153.EYxa <- sapply(1:8,SLAb.wrap,vil=153,d=d,simplify=FALSE)

Call:  
SuperLearner::SuperLearner(Y = fitd$Y, X = X, family = family, SL.library = SL.library,  
    method = "method.NNLS", id = fitd$id) 


                     Risk      Coef
SL.mean_All     0.2281343 0.2910919
SL.glm_All      0.2345320 0.0000000
SL.Yman2016_All 0.2237185 0.3932596
SL.gam.df3_All  0.2253334 0.3156486
SL.loess_All    0.2324170 0.0000000

Call:  
SuperLearner::SuperLearner(Y = fitd$Y, X = X, family = family, SL.library = SL.library,  
    method = "method.NNLS", id = fitd$id) 


                     Risk       Coef
SL.mean_All     0.6923309 0.08591549
SL.glm_All      0.6282996 0.00000000
SL.Yman2016_All 0.5596077 0.13168072
SL.gam.df4_All  0.5105208 0.78240379
SL.loess_All    0.5348448 0.00000000

Call:  
SuperLearner::SuperLearner(Y = fitd$Y, X = X, family = family, SL.library = SL.library,  
    method = "method.NNLS", id = fitd$id) 


                     Risk       Coef
SL.mean_All     0.8188138 0.04632478
SL.glm_All      0.6168293 0.13827005
SL.Yman2016_All 0.9586832 0.00000000
SL.gam.df5_All  0.4825125 0.81540517
SL.loess_All    0.4928605 0.00000000

Call:  
SuperLearner::SuperLearner(Y = fitd$Y, X = X, family = family, SL.library = SL.library,  
    method = "method.NNLS", id = fitd$id) 


                     Risk Coef
SL.mean_All     1.3640667    0
SL.glm_All      0.9059757    0
SL.Yman2016_All 1.5642053    0
SL.gam.df6_All  0.5480292    1
SL.loess_All    0.6901472    0

Call:  
SuperLearner::SuperLearner(Y = fitd$Y, X = X, family = family, SL.library = SL.library,  
    method = "method.NNLS", id = fitd$id) 


                     Risk       Coef
SL.mean_All     1.3133771 0.02759176
SL.glm_All      0.7221349 0.05174662
SL.Yman2016_All 0.7915506 0.00000000
SL.gam.df6_All  0.5289271 0.92066161
SL.loess_All    0.5645983 0.00000000

Call:  
SuperLearner::SuperLearner(Y = fitd$Y, X = X, family = family, SL.library = SL.library,  
    method = "method.NNLS", id = fitd$id) 


                     Risk Coef
SL.mean_All     1.4869859    0
SL.glm_All      0.8869522    0
SL.Yman2016_All 1.4251001    0
SL.gam.df6_All  0.5386109    1
SL.loess_All    0.6054059    0

Call:  
SuperLearner::SuperLearner(Y = fitd$Y, X = X, family = family, SL.library = SL.library,  
    method = "method.NNLS", id = fitd$id) 


                     Risk       Coef
SL.mean_All     1.0424504 0.08650447
SL.glm_All      0.8637491 0.00000000
SL.Yman2016_All 1.1610343 0.00000000
SL.gam.df2_All  0.8108488 0.91349553
SL.loess_All    0.8618574 0.00000000

Call:  
SuperLearner::SuperLearner(Y = fitd$Y, X = X, family = family, SL.library = SL.library,  
    method = "method.NNLS", id = fitd$id) 


                     Risk      Coef
SL.mean_All     0.6886231 0.2985552
SL.glm_All      0.6415120 0.0000000
SL.Yman2016_All 0.6619252 0.0000000
SL.gam.df5_All  0.6014039 0.0000000
SL.loess_All    0.5991382 0.7014448
Warning messages:
1: In ab_agecurve(Y = log10(d$ifatpftitre[d$village == vil & d$serosvy ==  :
  37 observations were dropped due to missing values in the outcome, age, or adjustement covariates. 
 The original dataset contained 93 observations,
 but ab_agecurve is fitting the curve using 56 observations.
2: In ab_agecurve(Y = log10(d$ifatpftitre[d$village == vil & d$serosvy ==  :
  40 observations were dropped due to missing values in the outcome, age, or adjustement covariates. 
 The original dataset contained 86 observations,
 but ab_agecurve is fitting the curve using 46 observations.
3: In dnorm(logAb, mean = log(Aa), sd = sigma) : NaNs produced
4: In ab_agecurve(Y = log10(d$ifatpftitre[d$village == vil & d$serosvy ==  :
  43 observations were dropped due to missing values in the outcome, age, or adjustement covariates. 
 The original dataset contained 93 observations,
 but ab_agecurve is fitting the curve using 50 observations.
5: In ab_agecurve(Y = log10(d$ifatpftitre[d$village == vil & d$serosvy ==  :
  41 observations were dropped due to missing values in the outcome, age, or adjustement covariates. 
 The original dataset contained 93 observations,
 but ab_agecurve is fitting the curve using 52 observations.
6: In ab_agecurve(Y = log10(d$ifatpftitre[d$village == vil & d$serosvy ==  :
  33 observations were dropped due to missing values in the outcome, age, or adjustement covariates. 
 The original dataset contained 87 observations,
 but ab_agecurve is fitting the curve using 54 observations.
7: In ab_agecurve(Y = log10(d$ifatpftitre[d$village == vil & d$serosvy ==  :
  44 observations were dropped due to missing values in the outcome, age, or adjustement covariates. 
 The original dataset contained 98 observations,
 but ab_agecurve is fitting the curve using 54 observations.
8: In ab_agecurve(Y = log10(d$ifatpftitre[d$village == vil & d$serosvy ==  :
  41 observations were dropped due to missing values in the outcome, age, or adjustement covariates. 
 The original dataset contained 100 observations,
 but ab_agecurve is fitting the curve using 59 observations.
9: In ab_agecurve(Y = log10(d$ifatpftitre[d$village == vil & d$serosvy ==  :
  70 observations were dropped due to missing values in the outcome, age, or adjustement covariates. 
 The original dataset contained 107 observations,
 but ab_agecurve is fitting the curve using 37 observations.
> 
> # Rafin Marke
> v154.EYxa <- sapply(1:8,SLAb.wrap,vil=154,d=d,simplify=FALSE)

Call:  
SuperLearner::SuperLearner(Y = fitd$Y, X = X, family = family, SL.library = SL.library,  
    method = "method.NNLS", id = fitd$id) 


                     Risk      Coef
SL.mean_All     0.3522631 0.1144932
SL.glm_All      0.3308602 0.3559119
SL.Yman2016_All 0.3351147 0.2729389
SL.gam.df4_All  0.3274607 0.0000000
SL.loess_All    0.3281534 0.2566560

Call:  
SuperLearner::SuperLearner(Y = fitd$Y, X = X, family = family, SL.library = SL.library,  
    method = "method.NNLS", id = fitd$id) 


                     Risk       Coef
SL.mean_All     0.7452696 0.06060466
SL.glm_All      0.6334645 0.00000000
SL.Yman2016_All 1.0789001 0.00000000
SL.gam.df2_All  0.5509028 0.56332162
SL.loess_All    0.5599172 0.37607372

Call:  
SuperLearner::SuperLearner(Y = fitd$Y, X = X, family = family, SL.library = SL.library,  
    method = "method.NNLS", id = fitd$id) 


                     Risk        Coef
SL.mean_All     1.0682056 0.000975238
SL.glm_All      0.6886046 0.032655326
SL.Yman2016_All 0.9031772 0.000000000
SL.gam.df6_All  0.5504835 0.000000000
SL.loess_All    0.5413787 0.966369436

Call:  
SuperLearner::SuperLearner(Y = fitd$Y, X = X, family = family, SL.library = SL.library,  
    method = "method.NNLS", id = fitd$id) 


                     Risk       Coef
SL.mean_All     1.4973597 0.00000000
SL.glm_All      0.8760657 0.09415367
SL.Yman2016_All 1.0284210 0.00000000
SL.gam.df5_All  0.7193222 0.00000000
SL.loess_All    0.7131219 0.90584633

Call:  
SuperLearner::SuperLearner(Y = fitd$Y, X = X, family = family, SL.library = SL.library,  
    method = "method.NNLS", id = fitd$id) 


                     Risk Coef
SL.mean_All     1.1859325    0
SL.glm_All      0.6620935    0
SL.Yman2016_All 1.1904197    0
SL.gam.df6_All  0.5097844    1
SL.loess_All    0.5210624    0

Call:  
SuperLearner::SuperLearner(Y = fitd$Y, X = X, family = family, SL.library = SL.library,  
    method = "method.NNLS", id = fitd$id) 


                     Risk Coef
SL.mean_All     1.5040389    0
SL.glm_All      0.7717767    0
SL.Yman2016_All 1.3698181    0
SL.gam.df6_All  0.5527012    0
SL.loess_All    0.5465502    1

Call:  
SuperLearner::SuperLearner(Y = fitd$Y, X = X, family = family, SL.library = SL.library,  
    method = "method.NNLS", id = fitd$id) 


                    Risk       Coef
SL.mean_All     1.776332 0.01566684
SL.glm_All      1.315910 0.12461240
SL.Yman2016_All 1.556288 0.00000000
SL.gam.df6_All  1.237323 0.00000000
SL.loess_All    1.233339 0.85972076

Call:  
SuperLearner::SuperLearner(Y = fitd$Y, X = X, family = family, SL.library = SL.library,  
    method = "method.NNLS", id = fitd$id) 


                    Risk       Coef
SL.mean_All     1.378100 0.08712167
SL.glm_All      1.060651 0.66663530
SL.Yman2016_All 1.992985 0.00000000
SL.gam.df4_All  1.083745 0.00000000
SL.loess_All    1.089859 0.24624303
There were 50 or more warnings (use warnings() to see the first 50)
> 
> # Kukar Maikiva
> v155.EYxa <- sapply(1:8,SLAb.wrap,vil=155,d=d,simplify=FALSE)

Call:  
SuperLearner::SuperLearner(Y = fitd$Y, X = X, family = family, SL.library = SL.library,  
    method = "method.NNLS", id = fitd$id) 


                     Risk      Coef
SL.mean_All     0.4926883 0.2063169
SL.glm_All      0.4858644 0.0000000
SL.Yman2016_All 0.4584420 0.5909036
SL.gam.df3_All  0.4638544 0.2027796
SL.loess_All    0.4721859 0.0000000

Call:  
SuperLearner::SuperLearner(Y = fitd$Y, X = X, family = family, SL.library = SL.library,  
    method = "method.NNLS", id = fitd$id) 


                     Risk       Coef
SL.mean_All     0.6845632 0.02863365
SL.glm_All      0.5778050 0.00000000
SL.Yman2016_All 0.6507385 0.00000000
SL.gam.df6_All  0.4514422 0.97136635
SL.loess_All    0.4682417 0.00000000

Call:  
SuperLearner::SuperLearner(Y = fitd$Y, X = X, family = family, SL.library = SL.library,  
    method = "method.NNLS", id = fitd$id) 


                     Risk Coef
SL.mean_All     0.9876430    0
SL.glm_All      0.6718268    0
SL.Yman2016_All 1.0361693    0
SL.gam.df6_All  0.5759891    1
SL.loess_All    0.6312620    0

Call:  
SuperLearner::SuperLearner(Y = fitd$Y, X = X, family = family, SL.library = SL.library,  
    method = "method.NNLS", id = fitd$id) 


                     Risk Coef
SL.mean_All     1.3983290    0
SL.glm_All      0.7126199    0
SL.Yman2016_All 0.9378074    0
SL.gam.df6_All  0.5509979    1
SL.loess_All    0.5822484    0

Call:  
SuperLearner::SuperLearner(Y = fitd$Y, X = X, family = family, SL.library = SL.library,  
    method = "method.NNLS", id = fitd$id) 


                     Risk Coef
SL.mean_All     1.2534276    0
SL.glm_All      0.6833640    0
SL.Yman2016_All 0.8546934    0
SL.gam.df5_All  0.5663977    1
SL.loess_All    0.5746365    0

Call:  
SuperLearner::SuperLearner(Y = fitd$Y, X = X, family = family, SL.library = SL.library,  
    method = "method.NNLS", id = fitd$id) 


                     Risk Coef
SL.mean_All     1.3071549    0
SL.glm_All      0.6747295    0
SL.Yman2016_All 1.0763156    0
SL.gam.df6_All  0.5467152    0
SL.loess_All    0.5381402    1

Call:  
SuperLearner::SuperLearner(Y = fitd$Y, X = X, family = family, SL.library = SL.library,  
    method = "method.NNLS", id = fitd$id) 


                    Risk       Coef
SL.mean_All     1.853282 0.01941843
SL.glm_All      1.219786 0.06882558
SL.Yman2016_All 1.129433 0.00000000
SL.gam.df5_All  1.051048 0.91175599
SL.loess_All    1.065144 0.00000000

Call:  
SuperLearner::SuperLearner(Y = fitd$Y, X = X, family = family, SL.library = SL.library,  
    method = "method.NNLS", id = fitd$id) 


                     Risk       Coef
SL.mean_All     1.4973264 0.01428275
SL.glm_All      1.0249397 0.13127608
SL.Yman2016_All 1.0332353 0.00000000
SL.gam.df4_All  0.9281030 0.85444117
SL.loess_All    0.9647457 0.00000000
Warning messages:
1: In ab_agecurve(Y = log10(d$ifatpftitre[d$village == vil & d$serosvy ==  :
  71 observations were dropped due to missing values in the outcome, age, or adjustement covariates. 
 The original dataset contained 174 observations,
 but ab_agecurve is fitting the curve using 103 observations.
2: In ab_agecurve(Y = log10(d$ifatpftitre[d$village == vil & d$serosvy ==  :
  74 observations were dropped due to missing values in the outcome, age, or adjustement covariates. 
 The original dataset contained 175 observations,
 but ab_agecurve is fitting the curve using 101 observations.
3: In ab_agecurve(Y = log10(d$ifatpftitre[d$village == vil & d$serosvy ==  :
  92 observations were dropped due to missing values in the outcome, age, or adjustement covariates. 
 The original dataset contained 212 observations,
 but ab_agecurve is fitting the curve using 120 observations.
4: In ab_agecurve(Y = log10(d$ifatpftitre[d$village == vil & d$serosvy ==  :
  84 observations were dropped due to missing values in the outcome, age, or adjustement covariates. 
 The original dataset contained 202 observations,
 but ab_agecurve is fitting the curve using 118 observations.
5: In ab_agecurve(Y = log10(d$ifatpftitre[d$village == vil & d$serosvy ==  :
  87 observations were dropped due to missing values in the outcome, age, or adjustement covariates. 
 The original dataset contained 206 observations,
 but ab_agecurve is fitting the curve using 119 observations.
6: In ab_agecurve(Y = log10(d$ifatpftitre[d$village == vil & d$serosvy ==  :
  92 observations were dropped due to missing values in the outcome, age, or adjustement covariates. 
 The original dataset contained 211 observations,
 but ab_agecurve is fitting the curve using 119 observations.
7: In ab_agecurve(Y = log10(d$ifatpftitre[d$village == vil & d$serosvy ==  :
  75 observations were dropped due to missing values in the outcome, age, or adjustement covariates. 
 The original dataset contained 187 observations,
 but ab_agecurve is fitting the curve using 112 observations.
8: In ab_agecurve(Y = log10(d$ifatpftitre[d$village == vil & d$serosvy ==  :
  119 observations were dropped due to missing values in the outcome, age, or adjustement covariates. 
 The original dataset contained 207 observations,
 but ab_agecurve is fitting the curve using 88 observations.
> 
> # village cluster 7
> # Kargo Kudu
> v213.EYxa <- sapply(1:8,SLAb.wrap,vil=213,d=d,simplify=FALSE)

Call:  
SuperLearner::SuperLearner(Y = fitd$Y, X = X, family = family, SL.library = SL.library,  
    method = "method.NNLS", id = fitd$id) 


                     Risk      Coef
SL.mean_All     0.1472650 0.3988678
SL.glm_All      0.1456675 0.6011322
SL.Yman2016_All 0.1473691 0.0000000
SL.gam.df2_All  0.1498314 0.0000000
SL.loess_All    0.1559050 0.0000000

Call:  
SuperLearner::SuperLearner(Y = fitd$Y, X = X, family = family, SL.library = SL.library,  
    method = "method.NNLS", id = fitd$id) 


                     Risk      Coef
SL.mean_All     0.2374962 0.1151688
SL.glm_All      0.2018474 0.0000000
SL.Yman2016_All 0.2120616 0.2082260
SL.gam.df3_All  0.1788612 0.6766052
SL.loess_All    0.2049789 0.0000000

Call:  
SuperLearner::SuperLearner(Y = fitd$Y, X = X, family = family, SL.library = SL.library,  
    method = "method.NNLS", id = fitd$id) 


                     Risk     Coef
SL.mean_All     1.0619617 0.000000
SL.glm_All      0.7742685 0.000000
SL.Yman2016_All 0.3957233 0.233521
SL.gam.df5_All  0.3504389 0.000000
SL.loess_All    0.3471008 0.766479

Call:  
SuperLearner::SuperLearner(Y = fitd$Y, X = X, family = family, SL.library = SL.library,  
    method = "method.NNLS", id = fitd$id) 


                     Risk Coef
SL.mean_All     1.1904982    0
SL.glm_All      0.6649312    0
SL.Yman2016_All 1.0920403    0
SL.gam.df6_All  0.4292420    1
SL.loess_All    0.5585686    0

Call:  
SuperLearner::SuperLearner(Y = fitd$Y, X = X, family = family, SL.library = SL.library,  
    method = "method.NNLS", id = fitd$id) 


                     Risk Coef
SL.mean_All     1.1391417    0
SL.glm_All      0.6411614    0
SL.Yman2016_All 1.0242884    0
SL.gam.df6_All  0.3878222    1
SL.loess_All    0.4551606    0

Call:  
SuperLearner::SuperLearner(Y = fitd$Y, X = X, family = family, SL.library = SL.library,  
    method = "method.NNLS", id = fitd$id) 


                     Risk Coef
SL.mean_All     1.3727712    0
SL.glm_All      0.5389397    0
SL.Yman2016_All 0.3245111    0
SL.gam.df4_All  0.2794250    1
SL.loess_All    0.2864318    0

Call:  
SuperLearner::SuperLearner(Y = fitd$Y, X = X, family = family, SL.library = SL.library,  
    method = "method.NNLS", id = fitd$id) 


                     Risk       Coef
SL.mean_All     1.1096194 0.05691762
SL.glm_All      0.7918994 0.15237382
SL.Yman2016_All 1.0984740 0.00000000
SL.gam.df5_All  0.6665284 0.79070856
SL.loess_All    0.6896431 0.00000000
Error in optim(c(0.1, 0.01, 1), fn = LL, Age = X, logAb = Y) : 
  function cannot be evaluated at initial parameters
In addition: Warning messages:
1: In ab_agecurve(Y = log10(d$ifatpftitre[d$village == vil & d$serosvy ==  :
  41 observations were dropped due to missing values in the outcome, age, or adjustement covariates. 
 The original dataset contained 110 observations,
 but ab_agecurve is fitting the curve using 69 observations.
2: In dnorm(logAb, mean = log(Aa), sd = sigma) : NaNs produced
3: In ab_agecurve(Y = log10(d$ifatpftitre[d$village == vil & d$serosvy ==  :
  48 observations were dropped due to missing values in the outcome, age, or adjustement covariates. 
 The original dataset contained 102 observations,
 but ab_agecurve is fitting the curve using 54 observations.
4: In ab_agecurve(Y = log10(d$ifatpftitre[d$village == vil & d$serosvy ==  :
  62 observations were dropped due to missing values in the outcome, age, or adjustement covariates. 
 The original dataset contained 114 observations,
 but ab_agecurve is fitting the curve using 52 observations.
5: In ab_agecurve(Y = log10(d$ifatpftitre[d$village == vil & d$serosvy ==  :
  63 observations were dropped due to missing values in the outcome, age, or adjustement covariates. 
 The original dataset contained 121 observations,
 but ab_agecurve is fitting the curve using 58 observations.
6: In ab_agecurve(Y = log10(d$ifatpftitre[d$village == vil & d$serosvy ==  :
  66 observations were dropped due to missing values in the outcome, age, or adjustement covariates. 
 The original dataset contained 142 observations,
 but ab_agecurve is fitting the curve using 76 observations.
7: In ab_agecurve(Y = log10(d$ifatpftitre[d$village == vil & d$serosvy ==  :
  71 observations were dropped due to missing values in the outcome, age, or adjustement covariates. 
 The original dataset contained 135 observations,
 but ab_agecurve is fitting the curve using 64 observations.
8: In ab_agecurve(Y = log10(d$ifatpftitre[d$village == vil & d$serosvy ==  :
  75 observations were dropped due to missing values in the outcome, age, or adjustement covariates. 
 The original dataset contained 145 observations,
 but ab_agecurve is fitting the curve using 70 observations.
9: In ab_agecurve(Y = log10(d$ifatpftitre[d$village == vil & d$serosvy ==  :
  86 observations were dropped due to missing values in the outcome, age, or adjustement covariates. 
 The original dataset contained 123 observations,
 but ab_agecurve is fitting the curve using 37 observations.
Error in optim(c(0.1, 0.01, 1), fn = LL, Age = X, logAb = Y) : 
  function cannot be evaluated at initial parameters
In addition: Warning message:
In FUN(X[[i]], ...) : Error in algorithm SL.Yman2016 
  The Algorithm will be removed from the Super Learner (i.e. given weight 0) 

Error in optim(c(0.1, 0.01, 1), fn = LL, Age = X, logAb = Y) : 
  function cannot be evaluated at initial parameters
In addition: Warning message:
In FUN(X[[i]], ...) : Error in algorithm SL.Yman2016 
  The Algorithm will be removed from the Super Learner (i.e. given weight 0) 

Error in optim(c(0.1, 0.01, 1), fn = LL, Age = X, logAb = Y) : 
  function cannot be evaluated at initial parameters
In addition: Warning message:
In FUN(X[[i]], ...) : Error in algorithm SL.Yman2016 
  The Algorithm will be removed from the Super Learner (i.e. given weight 0) 

Error in optim(c(0.1, 0.01, 1), fn = LL, Age = X, logAb = Y) : 
  function cannot be evaluated at initial parameters
In addition: Warning message:
In FUN(X[[i]], ...) : Error in algorithm SL.Yman2016 
  The Algorithm will be removed from the Super Learner (i.e. given weight 0) 

Error in optim(c(0.1, 0.01, 1), fn = LL, Age = X, logAb = Y) : 
  function cannot be evaluated at initial parameters
In addition: Warning message:
In FUN(X[[i]], ...) : Error in algorithm SL.Yman2016 
  The Algorithm will be removed from the Super Learner (i.e. given weight 0) 

Error in optim(c(0.1, 0.01, 1), fn = LL, Age = X, logAb = Y) : 
  function cannot be evaluated at initial parameters
In addition: Warning message:
In FUN(X[[i]], ...) : Error in algorithm SL.Yman2016 
  The Algorithm will be removed from the Super Learner (i.e. given weight 0) 

Error in optim(c(0.1, 0.01, 1), fn = LL, Age = X, logAb = Y) : 
  function cannot be evaluated at initial parameters
In addition: Warning message:
In FUN(X[[i]], ...) : Error in algorithm SL.Yman2016 
  The Algorithm will be removed from the Super Learner (i.e. given weight 0) 

Error in optim(c(0.1, 0.01, 1), fn = LL, Age = X, logAb = Y) : 
  function cannot be evaluated at initial parameters
In addition: Warning message:
In FUN(X[[i]], ...) : Error in algorithm SL.Yman2016 
  The Algorithm will be removed from the Super Learner (i.e. given weight 0) 

Error in optim(c(0.1, 0.01, 1), fn = LL, Age = X, logAb = Y) : 
  function cannot be evaluated at initial parameters
In addition: Warning message:
In FUN(X[[i]], ...) : Error in algorithm SL.Yman2016 
  The Algorithm will be removed from the Super Learner (i.e. given weight 0) 


Call:  
SuperLearner::SuperLearner(Y = fitd$Y, X = X, family = family, SL.library = SL.library,  
    method = "method.NNLS", id = fitd$id) 


                     Risk      Coef
SL.mean_All     0.2292039 0.0000000
SL.glm_All      0.1940330 0.3823415
SL.Yman2016_All        NA 0.0000000
SL.gam.df4_All  0.1547432 0.0000000
SL.loess_All    0.1606855 0.6176585
Warning messages:
1: In FUN(X[[i]], ...) : Error in algorithm SL.Yman2016  on full data 
  The Algorithm will be removed from the Super Learner (i.e. given weight 0) 

2: In SuperLearner::SuperLearner(Y = fitd$Y, X = X, id = fitd$id, SL.library = SL.library,  :
  coefficients already 0 for all failed algorithm(s)
> 
> # Nasakar
> v218.EYxa <- sapply(1:8,SLAb.wrap,vil=218,d=d,simplify=FALSE)

Call:  
SuperLearner::SuperLearner(Y = fitd$Y, X = X, family = family, SL.library = SL.library,  
    method = "method.NNLS", id = fitd$id) 


                     Risk      Coef
SL.mean_All     0.1592369 0.8164226
SL.glm_All      0.1653162 0.0000000
SL.Yman2016_All 0.1650843 0.1835774
SL.gam.df2_All  0.1664404 0.0000000
SL.loess_All    0.1672093 0.0000000

Call:  
SuperLearner::SuperLearner(Y = fitd$Y, X = X, family = family, SL.library = SL.library,  
    method = "method.NNLS", id = fitd$id) 


                     Risk        Coef
SL.mean_All     0.2303826 0.007326849
SL.glm_All      0.2108595 0.111936117
SL.Yman2016_All 0.2444002 0.000000000
SL.gam.df6_All  0.1655344 0.865784193
SL.loess_All    0.1692442 0.014952841

Call:  
SuperLearner::SuperLearner(Y = fitd$Y, X = X, family = family, SL.library = SL.library,  
    method = "method.NNLS", id = fitd$id) 


                     Risk Coef
SL.mean_All     0.6468166    0
SL.glm_All      0.4529363    0
SL.Yman2016_All 0.6643653    0
SL.gam.df5_All  0.3423657    0
SL.loess_All    0.3309932    1

Call:  
SuperLearner::SuperLearner(Y = fitd$Y, X = X, family = family, SL.library = SL.library,  
    method = "method.NNLS", id = fitd$id) 


                     Risk Coef
SL.mean_All     0.9997963    0
SL.glm_All      0.8313493    0
SL.Yman2016_All 0.9930978    0
SL.gam.df6_All  0.6198876    1
SL.loess_All    0.6326393    0

Call:  
SuperLearner::SuperLearner(Y = fitd$Y, X = X, family = family, SL.library = SL.library,  
    method = "method.NNLS", id = fitd$id) 


                     Risk      Coef
SL.mean_All     1.1770176 0.0000000
SL.glm_All      0.7689551 0.0000000
SL.Yman2016_All 1.1155810 0.0000000
SL.gam.df6_All  0.5650528 0.5480408
SL.loess_All    0.5718520 0.4519592

Call:  
SuperLearner::SuperLearner(Y = fitd$Y, X = X, family = family, SL.library = SL.library,  
    method = "method.NNLS", id = fitd$id) 


                     Risk       Coef
SL.mean_All     1.2309303 0.02456842
SL.glm_All      0.6532613 0.00000000
SL.Yman2016_All 0.8768252 0.00000000
SL.gam.df6_All  0.4913700 0.86332126
SL.loess_All    0.5138668 0.11211032

Call:  
SuperLearner::SuperLearner(Y = fitd$Y, X = X, family = family, SL.library = SL.library,  
    method = "method.NNLS", id = fitd$id) 


                    Risk       Coef
SL.mean_All     1.869754 0.01305887
SL.glm_All      1.228081 0.22277714
SL.Yman2016_All 1.618235 0.00000000
SL.gam.df5_All  1.101774 0.76416399
SL.loess_All    1.120489 0.00000000

Call:  
SuperLearner::SuperLearner(Y = fitd$Y, X = X, family = family, SL.library = SL.library,  
    method = "method.NNLS", id = fitd$id) 


                     Risk       Coef
SL.mean_All     1.2856272 0.01166109
SL.glm_All      0.9519413 0.00000000
SL.Yman2016_All 0.8438589 0.00000000
SL.gam.df6_All  0.7172894 0.98833891
SL.loess_All    0.7448547 0.00000000
There were 26 warnings (use warnings() to see them)
> 
> # Bakan Sabara
> v220.EYxa <- sapply(1:8,SLAb.wrap,vil=220,d=d,simplify=FALSE)

Call:  
SuperLearner::SuperLearner(Y = fitd$Y, X = X, family = family, SL.library = SL.library,  
    method = "method.NNLS", id = fitd$id) 


                     Risk       Coef
SL.mean_All     0.1750348 0.15328780
SL.glm_All      0.1670825 0.83069276
SL.Yman2016_All 0.1820420 0.01601945
SL.gam.df3_All  0.1844394 0.00000000
SL.loess_All    0.1978752 0.00000000

Call:  
SuperLearner::SuperLearner(Y = fitd$Y, X = X, family = family, SL.library = SL.library,  
    method = "method.NNLS", id = fitd$id) 


                      Risk     Coef
SL.mean_All     0.23991204 0.000000
SL.glm_All      0.15995765 0.217927
SL.Yman2016_All 0.67320704 0.000000
SL.gam.df4_All  0.09363707 0.782073
SL.loess_All    0.10404137 0.000000

Call:  
SuperLearner::SuperLearner(Y = fitd$Y, X = X, family = family, SL.library = SL.library,  
    method = "method.NNLS", id = fitd$id) 


                     Risk       Coef
SL.mean_All     0.6773582 0.05490654
SL.glm_All      0.3634099 0.49009722
SL.Yman2016_All 0.6590052 0.00000000
SL.gam.df3_All  0.3687780 0.45499624
SL.loess_All    0.3915825 0.00000000

Call:  
SuperLearner::SuperLearner(Y = fitd$Y, X = X, family = family, SL.library = SL.library,  
    method = "method.NNLS", id = fitd$id) 


                     Risk       Coef
SL.mean_All     1.3528320 0.00000000
SL.glm_All      0.8956479 0.11244357
SL.Yman2016_All 1.3029497 0.04717453
SL.gam.df6_All  0.7225038 0.84038190
SL.loess_All    0.7729714 0.00000000

Call:  
SuperLearner::SuperLearner(Y = fitd$Y, X = X, family = family, SL.library = SL.library,  
    method = "method.NNLS", id = fitd$id) 


                     Risk      Coef
SL.mean_All     1.6978865 0.0000000
SL.glm_All      0.9992395 0.2441612
SL.Yman2016_All 1.6542168 0.0000000
SL.gam.df6_All  0.6961045 0.7558388
SL.loess_All    0.9406985 0.0000000

Call:  
SuperLearner::SuperLearner(Y = fitd$Y, X = X, family = family, SL.library = SL.library,  
    method = "method.NNLS", id = fitd$id) 


                     Risk      Coef
SL.mean_All     1.5591564 0.0189511
SL.glm_All      0.4469566 0.7020200
SL.Yman2016_All 1.9600207 0.0000000
SL.gam.df5_All  0.5047587 0.0000000
SL.loess_All    0.5566714 0.2790289

Call:  
SuperLearner::SuperLearner(Y = fitd$Y, X = X, family = family, SL.library = SL.library,  
    method = "method.NNLS", id = fitd$id) 


                    Risk Coef
SL.mean_All     1.985924    0
SL.glm_All      1.443043    0
SL.Yman2016_All 1.049731    1
SL.gam.df4_All  1.204943    0
SL.loess_All    1.299663    0

Call:  
SuperLearner::SuperLearner(Y = fitd$Y, X = X, family = family, SL.library = SL.library,  
    method = "method.NNLS", id = fitd$id) 


                    Risk      Coef
SL.mean_All     1.700015 0.2676914
SL.glm_All      1.454789 0.0000000
SL.Yman2016_All 1.315450 0.3473678
SL.gam.df5_All  1.360313 0.0000000
SL.loess_All    1.794093 0.3849408
There were 24 warnings (use warnings() to see them)
> 
> 
> 
> #-------------------------------
> # Estimate mean IFA P. falciparm
> # titre by village and survey round
> #-------------------------------
> 
> #-------------------------------
> # Serological survey timing:
> # 1-2 : pre-intervention
> # 3-5 : intervention period
> # 6-8 : post-intervention
> #-------------------------------
> 
> 
> ## Control Villages (no measurement in round 6)
> # Nabanawa + Ajura
> 
> v552 <-  sapply(c(1:5,7:8),function(x) ab_tmle(
+   Y=log10(d$ifatpftitre[d$tr=="Control" & d$serosvy==x]+1),
+   Age=d$ageyrs[d$tr=="Control" & d$serosvy==x],
+   id=d$id[d$tr=="Control" & d$serosvy==x],
+   SL.library=SL.library
+   )
+ )
 Population Mean
   Parameter Estimate:  3.2068
   Estimated Variance:  0.0013173
              p-value:  <2e-16
    95% Conf Interval: (3.1356, 3.2779) 
 Population Mean
   Parameter Estimate:  3.0684
   Estimated Variance:  0.0014501
              p-value:  <2e-16
    95% Conf Interval: (2.9938, 3.143) 
 Population Mean
   Parameter Estimate:  3.1047
   Estimated Variance:  0.0021665
              p-value:  <2e-16
    95% Conf Interval: (3.0135, 3.1959) 
 Population Mean
   Parameter Estimate:  2.7871
   Estimated Variance:  0.0040448
              p-value:  <2e-16
    95% Conf Interval: (2.6625, 2.9118) 
 Population Mean
   Parameter Estimate:  3.2218
   Estimated Variance:  0.0026335
              p-value:  <2e-16
    95% Conf Interval: (3.1212, 3.3224) 
 Population Mean
   Parameter Estimate:  3.1193
   Estimated Variance:  0.00218
              p-value:  <2e-16
    95% Conf Interval: (3.0278, 3.2108) 
 Population Mean
   Parameter Estimate:  2.8336
   Estimated Variance:  0.0043164
              p-value:  <2e-16
    95% Conf Interval: (2.7049, 2.9624) 
> 	# add NA column for survey round 6
> 	v552 <- cbind(v552[,1:5],rep(NA,5),v552[,6:7])
> 
> 
> 
> ### Spraying (Propoxur) + MDA
> 
> # village cluster 5
> # Kawari
> v153 <- sapply(c(1:8),function(x) ab_tmle(
+     Y=log10(d$ifatpftitre[d$village==153 & d$serosvy==x]+1),
+     Age=d$ageyrs[d$village==153 & d$serosvy==x],
+     id=d$id[d$village==153 & d$serosvy==x],
+     SL.library=SL.library
+     )
+   )
 Population Mean
   Parameter Estimate:  3.372
   Estimated Variance:  0.0040015
              p-value:  <2e-16
    95% Conf Interval: (3.248, 3.496) 
 Population Mean
   Parameter Estimate:  3.1927
   Estimated Variance:  0.014253
              p-value:  <2e-16
    95% Conf Interval: (2.9587, 3.4267) 
 Population Mean
   Parameter Estimate:  2.514
   Estimated Variance:  0.016419
              p-value:  <2e-16
    95% Conf Interval: (2.2628, 2.7651) 
 Population Mean
   Parameter Estimate:  2.2142
   Estimated Variance:  0.026311
              p-value:  <2e-16
    95% Conf Interval: (1.8963, 2.5322) 
 Population Mean
   Parameter Estimate:  1.6994
   Estimated Variance:  0.02399
              p-value:  <2e-16
    95% Conf Interval: (1.3959, 2.003) 
 Population Mean
   Parameter Estimate:  1.473
   Estimated Variance:  0.026988
              p-value:  <2e-16
    95% Conf Interval: (1.151, 1.795) 
 Population Mean
   Parameter Estimate:  2.7513
   Estimated Variance:  0.017229
              p-value:  <2e-16
    95% Conf Interval: (2.4941, 3.0086) 
 Population Mean
   Parameter Estimate:  2.6633
   Estimated Variance:  0.017542
              p-value:  <2e-16
    95% Conf Interval: (2.4037, 2.9229) 
> # Rafin Marke
> v154 <- sapply(c(1:8),function(x) ab_tmle(
+   Y=log10(d$ifatpftitre[d$village==154 & d$serosvy==x]+1),
+   Age=d$ageyrs[d$village==154 & d$serosvy==x],
+   id=d$id[d$village==154 & d$serosvy==x],
+   SL.library=SL.library
+   )
+ )
 Population Mean
   Parameter Estimate:  3.2713
   Estimated Variance:  0.0048087
              p-value:  <2e-16
    95% Conf Interval: (3.1354, 3.4072) 
 Population Mean
   Parameter Estimate:  3.0625
   Estimated Variance:  0.011956
              p-value:  <2e-16
    95% Conf Interval: (2.8482, 3.2768) 
 Population Mean
   Parameter Estimate:  2.3759
   Estimated Variance:  0.015287
              p-value:  <2e-16
    95% Conf Interval: (2.1336, 2.6183) 
 Population Mean
   Parameter Estimate:  1.8849
   Estimated Variance:  0.019921
              p-value:  <2e-16
    95% Conf Interval: (1.6083, 2.1615) 
 Population Mean
   Parameter Estimate:  1.391
   Estimated Variance:  0.014727
              p-value:  <2e-16
    95% Conf Interval: (1.1532, 1.6289) 
 Population Mean
   Parameter Estimate:  1.2868
   Estimated Variance:  0.017131
              p-value:  <2e-16
    95% Conf Interval: (1.0303, 1.5433) 
 Population Mean
   Parameter Estimate:  2.3054
   Estimated Variance:  0.020706
              p-value:  <2e-16
    95% Conf Interval: (2.0234, 2.5875) 
 Population Mean
   Parameter Estimate:  2.0923
   Estimated Variance:  0.021512
              p-value:  <2e-16
    95% Conf Interval: (1.8048, 2.3797) 
> # Kukar Maikiva
> v155 <- sapply(c(1:8),function(x) ab_tmle(
+   Y=log10(d$ifatpftitre[d$village==155 & d$serosvy==x]+1),
+   Age=d$ageyrs[d$village==155 & d$serosvy==x],
+   id=d$id[d$village==155 & d$serosvy==x],
+   SL.library=SL.library
+   )
+ )
 Population Mean
   Parameter Estimate:  3.2727
   Estimated Variance:  0.0047103
              p-value:  <2e-16
    95% Conf Interval: (3.1382, 3.4073) 
 Population Mean
   Parameter Estimate:  3.1013
   Estimated Variance:  0.0066257
              p-value:  <2e-16
    95% Conf Interval: (2.9417, 3.2608) 
 Population Mean
   Parameter Estimate:  2.421
   Estimated Variance:  0.008142
              p-value:  <2e-16
    95% Conf Interval: (2.2442, 2.5979) 
 Population Mean
   Parameter Estimate:  1.9033
   Estimated Variance:  0.0117
              p-value:  <2e-16
    95% Conf Interval: (1.6913, 2.1153) 
 Population Mean
   Parameter Estimate:  1.6254
   Estimated Variance:  0.010503
              p-value:  <2e-16
    95% Conf Interval: (1.4245, 1.8263) 
 Population Mean
   Parameter Estimate:  1.3605
   Estimated Variance:  0.010896
              p-value:  <2e-16
    95% Conf Interval: (1.1559, 1.5651) 
 Population Mean
   Parameter Estimate:  2.2083
   Estimated Variance:  0.016185
              p-value:  <2e-16
    95% Conf Interval: (1.959, 2.4576) 
 Population Mean
   Parameter Estimate:  2.2011
   Estimated Variance:  0.01659
              p-value:  <2e-16
    95% Conf Interval: (1.9487, 2.4536) 
> 
> # village cluster 7
> # Kargo Kudu
> v213 <- sapply(c(1:8),function(x) ab_tmle(
+   Y=log10(d$ifatpftitre[d$village==213 & d$serosvy==x]+1),
+   Age=d$ageyrs[d$village==213 & d$serosvy==x],
+   id=d$id[d$village==213 & d$serosvy==x],
+   SL.library=SL.library
+   )
+ )
 Population Mean
   Parameter Estimate:  3.3688
   Estimated Variance:  0.0020987
              p-value:  <2e-16
    95% Conf Interval: (3.2791, 3.4586) 
 Population Mean
   Parameter Estimate:  3.1837
   Estimated Variance:  0.0043417
              p-value:  <2e-16
    95% Conf Interval: (3.0545, 3.3128) 
 Population Mean
   Parameter Estimate:  2.6531
   Estimated Variance:  0.020476
              p-value:  <2e-16
    95% Conf Interval: (2.3727, 2.9336) 
 Population Mean
   Parameter Estimate:  2.13
   Estimated Variance:  0.019938
              p-value:  <2e-16
    95% Conf Interval: (1.8532, 2.4068) 
 Population Mean
   Parameter Estimate:  1.7722
   Estimated Variance:  0.014447
              p-value:  <2e-16
    95% Conf Interval: (1.5367, 2.0078) 
 Population Mean
   Parameter Estimate:  1.504
   Estimated Variance:  0.020847
              p-value:  <2e-16
    95% Conf Interval: (1.221, 1.787) 
 Population Mean
   Parameter Estimate:  2.4213
   Estimated Variance:  0.015541
              p-value:  <2e-16
    95% Conf Interval: (2.177, 2.6657) 
Error in optim(c(0.1, 0.01, 1), fn = LL, Age = X, logAb = Y) : 
  function cannot be evaluated at initial parameters
Error in optim(c(0.1, 0.01, 1), fn = LL, Age = X, logAb = Y) : 
  function cannot be evaluated at initial parameters
Error in optim(c(0.1, 0.01, 1), fn = LL, Age = X, logAb = Y) : 
  function cannot be evaluated at initial parameters
Error in optim(c(0.1, 0.01, 1), fn = LL, Age = X, logAb = Y) : 
  function cannot be evaluated at initial parameters
Error in optim(c(0.1, 0.01, 1), fn = LL, Age = X, logAb = Y) : 
  function cannot be evaluated at initial parameters
 Population Mean
   Parameter Estimate:  2.9526
   Estimated Variance:  0.0059786
              p-value:  <2e-16
    95% Conf Interval: (2.8011, 3.1041) 
> # Nasakar
> v218 <- sapply(c(1:8),function(x) ab_tmle(
+   Y=log10(d$ifatpftitre[d$village==218 & d$serosvy==x]+1),
+   Age=d$ageyrs[d$village==218 & d$serosvy==x],
+   id=d$id[d$village==218 & d$serosvy==x],
+   SL.library=SL.library
+   )
+ )
 Population Mean
   Parameter Estimate:  3.3802
   Estimated Variance:  0.0018674
              p-value:  <2e-16
    95% Conf Interval: (3.2955, 3.4649) 
 Population Mean
   Parameter Estimate:  3.2589
   Estimated Variance:  0.002919
              p-value:  <2e-16
    95% Conf Interval: (3.153, 3.3648) 
 Population Mean
   Parameter Estimate:  2.6999
   Estimated Variance:  0.0073489
              p-value:  <2e-16
    95% Conf Interval: (2.5319, 2.8679) 
 Population Mean
   Parameter Estimate:  2.1686
   Estimated Variance:  0.012887
              p-value:  <2e-16
    95% Conf Interval: (1.9461, 2.3911) 
 Population Mean
   Parameter Estimate:  1.5534
   Estimated Variance:  0.014398
              p-value:  <2e-16
    95% Conf Interval: (1.3183, 1.7886) 
 Population Mean
   Parameter Estimate:  1.4052
   Estimated Variance:  0.015852
              p-value:  <2e-16
    95% Conf Interval: (1.1584, 1.652) 
 Population Mean
   Parameter Estimate:  2.0886
   Estimated Variance:  0.02349
              p-value:  <2e-16
    95% Conf Interval: (1.7882, 2.389) 
 Population Mean
   Parameter Estimate:  2.3559
   Estimated Variance:  0.026464
              p-value:  <2e-16
    95% Conf Interval: (2.037, 2.6747) 
> # Bakan Sabara
> v220 <- sapply(c(1:8),function(x) ab_tmle(
+   Y=log10(d$ifatpftitre[d$village==220 & d$serosvy==x]+1),
+   Age=d$ageyrs[d$village==220 & d$serosvy==x],
+   id=d$id[d$village==220 & d$serosvy==x],
+   SL.library=SL.library
+   )
+ )
 Population Mean
   Parameter Estimate:  3.3632
   Estimated Variance:  0.0060476
              p-value:  <2e-16
    95% Conf Interval: (3.2107, 3.5156) 
 Population Mean
   Parameter Estimate:  3.235
   Estimated Variance:  0.011267
              p-value:  <2e-16
    95% Conf Interval: (3.027, 3.4431) 
 Population Mean
   Parameter Estimate:  2.563
   Estimated Variance:  0.024284
              p-value:  <2e-16
    95% Conf Interval: (2.2575, 2.8684) 
 Population Mean
   Parameter Estimate:  1.9346
   Estimated Variance:  0.038234
              p-value:  <2e-16
    95% Conf Interval: (1.5514, 2.3179) 
 Population Mean
   Parameter Estimate:  1.0333
   Estimated Variance:  0.050257
              p-value:  4.0381e-06
    95% Conf Interval: (0.59395, 1.4727) 
 Population Mean
   Parameter Estimate:  1.0582
   Estimated Variance:  0.056785
              p-value:  8.959e-06
    95% Conf Interval: (0.59118, 1.5253) 
 Population Mean
   Parameter Estimate:  1.9956
   Estimated Variance:  0.058358
              p-value:  <2e-16
    95% Conf Interval: (1.5221, 2.4691) 
 Population Mean
   Parameter Estimate:  2.1643
   Estimated Variance:  0.079938
              p-value:  1.9322e-14
    95% Conf Interval: (1.6102, 2.7185) 
> 
> #-------------------------------
> # save the analysis output
> #-------------------------------
> rm(d)
> save.image("~/dropbox/articles/antibody-curves/results/raw/garki-village-EY-by-round.RData")
> 
> 
> 
> proc.time()
   user  system elapsed 
 67.267   0.985  73.415 
